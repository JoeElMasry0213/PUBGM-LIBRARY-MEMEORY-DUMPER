using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Threading;
using System.Runtime.InteropServices;
using System.IO;
using System.Globalization;
using System.Windows.Forms;
using System.Net.Http;
using System.Text;

namespace WindowsFormsApp1
{


    public partial class Form1 : Form


    {

        public  Form1()
        {
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            System.IO.Directory.CreateDirectory("moded");
            System.IO.Directory.CreateDirectory("orginal");
        }


        internal struct MemoryRegionResult
        {
            public UIntPtr CurrentBaseAddress { get; set; }

            public long RegionSize { get; set; }

            public UIntPtr RegionBase { get; set; }
        }

        //public Mem m = new Mem();

        private string ipconfigOutput;

        private string processnamestr;

        private string ue4base;

        private string anogs;
        private string tdata;
        private string gcloud;

        private string tprt;
        private string Bugly;
        private string cubehawk;
        private string tgpa;

        private string dumpFile = "";

        private string origFile = "";

        private long counter;

        public int TargetMemory = 250;//target memory usage to detect

        private bool valver;

        private long libUE4Base;

        private long loadstat;

        private bool loadinfo;

        public long libtersafeBase;

        private string txtProc;
        private string Procname;

        private SaveFileDialog saveUI = new SaveFileDialog();

        private long num1;

        private long num2;

        private string processemu;

        public long libgcloud;
        public  long libanogs;
        public  long libBugly;
        public  long libcubehawk;
        public  long libtgpa;
        public  long libtprt;
        public  long libTDataMaster;


        private static byte[] driver = { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x33, 0x59, 0xE0, 0x19, 0x52, 0x37, 0xB3, 0x19, 0x52, 0x37, 0xB3, 0x19, 0x52, 0x37, 0xB3, 0x10, 0x2A, 0xBF, 0xB3, 0x1A, 0x52, 0x37, 0xB3, 0x10, 0x2A, 0xA4, 0xB3, 0x1B, 0x52, 0x37, 0xB3, 0x19, 0x52, 0x36, 0xB3, 0x12, 0x52, 0x37, 0xB3, 0x3B, 0x32, 0x36, 0xB2, 0x1A, 0x52, 0x37, 0xB3, 0x3B, 0x32, 0x34, 0xB2, 0x1A, 0x52, 0x37, 0xB3, 0x3B, 0x32, 0x33, 0xB2, 0x1A, 0x52, 0x37, 0xB3, 0x8E, 0x0C, 0x33, 0xB2, 0x18, 0x52, 0x37, 0xB3, 0x8E, 0x0C, 0x35, 0xB2, 0x18, 0x52, 0x37, 0xB3, 0x52, 0x69, 0x63, 0x68, 0x19, 0x52, 0x37, 0xB3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x64, 0x86, 0x07, 0x00, 0xCB, 0x0F, 0x2B, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x22, 0x00, 0x0B, 0x02, 0x0E, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xD9, 0x61, 0x00, 0x00, 0x01, 0x00, 0x60, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x60, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x70, 0x11, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xB0, 0x20, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x20, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x09, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x68, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x48, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC8, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x48, 0x2E, 0x67, 0x66, 0x69, 0x64, 0x73, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x48, 0x49, 0x4E, 0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x62, 0x2E, 0x72, 0x65, 0x6C, 0x6F, 0x63, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xEC, 0x28, 0x48, 0x8D, 0x0D, 0xF5, 0x1F, 0x00, 0x00, 0xE8, 0xA0, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0x05, 0xF1, 0x2C, 0x00, 0x00, 0x48, 0x8D, 0x15, 0xE2, 0x1F, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xC3, 0x2C, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x28, 0xE9, 0x42, 0x04, 0x00, 0x00, 0xCC, 0xCC, 0xE9, 0xCB, 0xFF, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28, 0x48, 0x8B, 0x05, 0xB5, 0x2C, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x0E, 0x48, 0x8D, 0x15, 0xE9, 0xFF, 0xFF, 0xFF, 0x48, 0x3B, 0xC2, 0x74, 0x02, 0xFF, 0xD0, 0x48, 0x83, 0xC4, 0x28, 0xE9, 0xA1, 0xFF, 0xFF, 0xFF, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x33, 0xED, 0x48, 0x8B, 0xF2, 0x48, 0x8B, 0xF9, 0x48, 0x3B, 0xCD, 0x75, 0x0C, 0x33, 0xC9, 0xE8, 0x98, 0x02, 0x00, 0x00, 0xE9, 0xE0, 0x00, 0x00, 0x00, 0xB8, 0x08, 0x02, 0x00, 0x00, 0x48, 0x89, 0x0D, 0x77, 0x2C, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x48, 0x2C, 0x00, 0x00, 0x66, 0x89, 0x05, 0x43, 0x2C, 0x00, 0x00, 0x48, 0x8D, 0x05, 0x72, 0x2C, 0x00, 0x00, 0x66, 0x89, 0x2D, 0x33, 0x2C, 0x00, 0x00, 0x48, 0x89, 0x05, 0x34, 0x2C, 0x00, 0x00, 0xFF, 0x15, 0x6E, 0x0F, 0x00, 0x00, 0x4C, 0x8D, 0x0D, 0x3F, 0x2C, 0x00, 0x00, 0x4C, 0x8D, 0x05, 0x30, 0x1F, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x11, 0x2C, 0x00, 0x00, 0x48, 0x8B, 0xCF, 0xE8, 0x97, 0x03, 0x00, 0x00, 0x3B, 0xC5, 0x0F, 0x8C, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x12, 0x1F, 0x00, 0x00, 0xE8, 0x35, 0x01, 0x00, 0x00, 0x3B, 0xC5, 0x8B, 0xD8, 0x7C, 0x6D, 0xE8, 0xB2, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xD6, 0x48, 0x8B, 0xCF, 0xE8, 0x17, 0x02, 0x00, 0x00, 0x3B, 0xC5, 0x8B, 0xD8, 0x7C, 0x57, 0x48, 0x8B, 0x05, 0xF2, 0x2B, 0x00, 0x00, 0x40, 0x38, 0x68, 0x30, 0x74, 0x24, 0x48, 0x8B, 0x05, 0xD5, 0x2B, 0x00, 0x00, 0x48, 0x39, 0x6F, 0x68, 0x48, 0x0F, 0x45, 0x47, 0x68, 0x48, 0x89, 0x05, 0xC5, 0x2B, 0x00, 0x00, 0x48, 0x8D, 0x05, 0xFE, 0xFE, 0xFF, 0xFF, 0x48, 0x89, 0x47, 0x68, 0xEB, 0x22, 0xF6, 0x40, 0x08, 0x02, 0x74, 0x1C, 0x48, 0x8B, 0x05, 0x7B, 0x25, 0x00, 0x00, 0x48, 0x89, 0x05, 0xAC, 0x2B, 0x00, 0x00, 0x48, 0x8D, 0x05, 0xD5, 0xFE, 0xFF, 0xFF, 0x48, 0x89, 0x05, 0x66, 0x25, 0x00, 0x00, 0x33, 0xC0, 0xEB, 0x07, 0xE8, 0x95, 0xFE, 0xFF, 0xFF, 0x8B, 0xC3, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B, 0x6C, 0x24, 0x38, 0x48, 0x8B, 0x74, 0x24, 0x40, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xDA, 0x48, 0x8B, 0xF9, 0xE8, 0x67, 0x4E, 0x00, 0x00, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCF, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xE9, 0xB2, 0xFE, 0xFF, 0xFF, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0x05, 0x97, 0x1E, 0x00, 0x00, 0x48, 0x8B, 0xF9, 0x48, 0x8D, 0x0D, 0x75, 0x1E, 0x00, 0x00, 0x48, 0x8D, 0x1D, 0x7E, 0x1E, 0x00, 0x00, 0x48, 0x3B, 0xC1, 0x74, 0x45, 0x48, 0x3B, 0xD8, 0x77, 0x40, 0x48, 0x8B, 0x43, 0x40, 0x48, 0x85, 0xC0, 0x74, 0x18, 0x4C, 0x8B, 0x05, 0x1C, 0x2B, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x8F, 0x02, 0x00, 0x00, 0x4C, 0x8B, 0xCB, 0x48, 0x8B, 0xD7, 0xFF, 0xD0, 0xEB, 0x12, 0x48, 0x8B, 0x15, 0x04, 0x2B, 0x00, 0x00, 0x4C, 0x8B, 0xC3, 0x48, 0x8B, 0xCF, 0xE8, 0x73, 0x02, 0x00, 0x00, 0x48, 0x83, 0xC3, 0x50, 0x48, 0x3B, 0x1D, 0x3E, 0x1E, 0x00, 0x00, 0x76, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xF9, 0x33, 0xC0, 0x48, 0x8D, 0x1D, 0x0D, 0x1E, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x06, 0x1E, 0x00, 0x00, 0x48, 0x3B, 0xDE, 0x73, 0x4E, 0x83, 0x3B, 0x50, 0x75, 0x44, 0x48, 0x8B, 0x43, 0x38, 0x48, 0x89, 0x1D, 0xF9, 0x1D, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x18, 0x4C, 0x8B, 0x05, 0x9D, 0x2A, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x0A, 0x02, 0x00, 0x00, 0x4C, 0x8B, 0xCB, 0x48, 0x8B, 0xD7, 0xFF, 0xD0, 0xEB, 0x12, 0x48, 0x8B, 0x15, 0x85, 0x2A, 0x00, 0x00, 0x4C, 0x8B, 0xC3, 0x48, 0x8B, 0xCF, 0xE8, 0xEE, 0x01, 0x00, 0x00, 0x85, 0xC0, 0x78, 0x0B, 0x48, 0x83, 0xC3, 0x50, 0xEB, 0xB2, 0xB8, 0x04, 0x00, 0x00, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B, 0x74, 0x24, 0x38, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8D, 0x05, 0xAF, 0x1D, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xA8, 0x1D, 0x00, 0x00, 0x48, 0x3B, 0xC1, 0x73, 0x3C, 0x48, 0x2B, 0xC8, 0x48, 0xB8, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x1D, 0xAF, 0x1D, 0x00, 0x00, 0x48, 0xFF, 0xC9, 0x48, 0xF7, 0xE1, 0x48, 0x8B, 0xFA, 0x48, 0xC1, 0xEF, 0x05, 0x48, 0xFF, 0xC7, 0x48, 0x8B, 0x03, 0x48, 0x85, 0xC0, 0x74, 0x06, 0xFF, 0xD0, 0x48, 0x89, 0x43, 0xF8, 0x48, 0x83, 0xC3, 0x28, 0x48, 0x83, 0xEF, 0x01, 0x75, 0xE8, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x55, 0x48, 0x8B, 0xEC, 0x48, 0x83, 0xEC, 0x70, 0x48, 0x8D, 0x05, 0x00, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xD9, 0x48, 0x89, 0x41, 0x68, 0x48, 0x8D, 0x0D, 0x3E, 0x03, 0x00, 0x00, 0xE8, 0x19, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x43, 0x28, 0x48, 0x8D, 0x4D, 0xD0, 0x33, 0xD2, 0x83, 0x48, 0x68, 0x20, 0x44, 0x8D, 0x42, 0x28, 0xE8, 0x22, 0x02, 0x00, 0x00, 0xFF, 0x15, 0xC4, 0x0C, 0x00, 0x00, 0x48, 0x83, 0x65, 0xE8, 0x00, 0x48, 0x8D, 0x15, 0x30, 0x03, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x00, 0x66, 0x89, 0x45, 0xD0, 0x48, 0x8D, 0x4D, 0xD8, 0x66, 0x89, 0x5D, 0xD2, 0xFF, 0x15, 0xD1, 0x0C, 0x00, 0x00, 0x33, 0xD2, 0x44, 0x8D, 0x43, 0x1F, 0x48, 0x8D, 0x4D, 0xB0, 0xE8, 0xEA, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x05, 0xB3, 0x0C, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x8C, 0x2B, 0x00, 0x00, 0x48, 0x89, 0x45, 0xB0, 0x48, 0x8D, 0x4D, 0xD0, 0x48, 0x8D, 0x05, 0x69, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xB8, 0x03, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xC0, 0x48, 0x8D, 0x45, 0xB0, 0x48, 0x89, 0x45, 0xF0, 0xFF, 0x15, 0x74, 0x0C, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x27, 0x48, 0x8D, 0x0D, 0xD9, 0x02, 0x00, 0x00, 0xE8, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x15, 0x4D, 0x2B, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xE6, 0x02, 0x00, 0x00, 0xE8, 0x71, 0x00, 0x00, 0x00, 0x89, 0x1D, 0x33, 0x2B, 0x00, 0x00, 0xEB, 0x15, 0x8B, 0xD0, 0x48, 0x8D, 0x0D, 0xE0, 0x02, 0x00, 0x00, 0xE8, 0x5B, 0x00, 0x00, 0x00, 0x83, 0x25, 0x1C, 0x2B, 0x00, 0x00, 0x00, 0x33, 0xC0, 0x48, 0x8B, 0x9C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x70, 0x5D, 0xC3, 0x48, 0x8B, 0x42, 0x20, 0xB9, 0xFF, 0xFF, 0x1F, 0x00, 0x89, 0x08, 0x48, 0x8B, 0x42, 0x20, 0x89, 0x48, 0x04, 0x33, 0xC0, 0xC3, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28, 0x48, 0x8D, 0x0D, 0xB1, 0x02, 0x00, 0x00, 0xE8, 0x1C, 0x00, 0x00, 0x00, 0x83, 0x3D, 0xDD, 0x2A, 0x00, 0x00, 0x01, 0x75, 0x0D, 0x48, 0x8B, 0x0D, 0xDC, 0x2A, 0x00, 0x00, 0xFF, 0x15, 0xDE, 0x0B, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0xFF, 0x25, 0xE2, 0x0B, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFF, 0x25, 0x9A, 0x0B, 0x00, 0x00, 0xFF, 0x25, 0x8C, 0x0B, 0x00, 0x00, 0xFF, 0x25, 0x7E, 0x0B, 0x00, 0x00, 0xFF, 0x25, 0x90, 0x0B, 0x00, 0x00, 0xC2, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x33, 0xDB, 0xFF, 0x25, 0xAF, 0x0B, 0x00, 0x00, 0xCC, 0x49, 0x83, 0xCB, 0x01, 0xEB, 0xF3, 0x49, 0x83, 0xCB, 0x02, 0xEB, 0xED, 0x49, 0x83, 0xCB, 0x03, 0xEB, 0xE7, 0x49, 0x83, 0xCB, 0x04, 0xEB, 0xE1, 0x49, 0x83, 0xCB, 0x05, 0xEB, 0xDB, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x66, 0x90, 0x49, 0x8B, 0xC3, 0x48, 0x83, 0xE0, 0x07, 0x85, 0xC0, 0x75, 0x10, 0x48, 0x8B, 0x14, 0x24, 0x64, 0x4C, 0x8B, 0x04, 0x24, 0xB9, 0x2C, 0x00, 0x00, 0x00, 0xCD, 0x29, 0x3C, 0x03, 0x74, 0x1F, 0x4C, 0x8B, 0xC1, 0x3C, 0x01, 0x74, 0x18, 0x4C, 0x8B, 0xC2, 0x3C, 0x02, 0x74, 0x11, 0x4D, 0x8B, 0xC1, 0x3C, 0x04, 0x74, 0x0A, 0x4D, 0x8B, 0xC2, 0x3C, 0x05, 0x74, 0x03, 0x4D, 0x33, 0xC0, 0x4C, 0x33, 0xD8, 0x49, 0x8B, 0x13, 0xEB, 0xCE, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0F, 0x1F, 0x40, 0x00, 0xFF, 0x25, 0x3A, 0x0B, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0F, 0x1F, 0x40, 0x00, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8B, 0xC1, 0x49, 0x83, 0xF8, 0x08, 0x72, 0x2C, 0x0F, 0xB6, 0xD2, 0x49, 0xB9, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x49, 0x0F, 0xAF, 0xD1, 0x49, 0x83, 0xF8, 0x47, 0x73, 0x60, 0x4D, 0x8B, 0xC8, 0x49, 0x83, 0xE1, 0xF8, 0x49, 0x03, 0xC9, 0x49, 0x89, 0x54, 0x01, 0xF8, 0x49, 0x83, 0xE9, 0x08, 0x75, 0xF5, 0x49, 0x83, 0xE0, 0x07, 0x74, 0x0F, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x41, 0x88, 0x54, 0x08, 0xFF, 0x49, 0xFF, 0xC8, 0x75, 0xF6, 0x90, 0xC3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0xF7, 0xD9, 0x83, 0xE1, 0x07, 0x74, 0x06, 0x4C, 0x2B, 0xC1, 0x48, 0x89, 0x10, 0x48, 0x03, 0xC8, 0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x03, 0x4D, 0x8B, 0xD1, 0x49, 0xC1, 0xEA, 0x03, 0x49, 0x83, 0xE1, 0x07, 0x74, 0x1C, 0x49, 0x83, 0xE9, 0x08, 0x4A, 0x8D, 0x0C, 0xC9, 0x49, 0xF7, 0xD9, 0x49, 0xFF, 0xC2, 0x4C, 0x8D, 0x1D, 0x06, 0x00, 0x00, 0x00, 0x4F, 0x8D, 0x1C, 0x8B, 0x41, 0xFF, 0xE3, 0x48, 0x89, 0x11, 0x48, 0x89, 0x51, 0x08, 0x48, 0x89, 0x51, 0x10, 0x48, 0x89, 0x51, 0x18, 0x48, 0x89, 0x51, 0x20, 0x48, 0x89, 0x51, 0x28, 0x48, 0x89, 0x51, 0x30, 0x48, 0x89, 0x51, 0x38, 0x48, 0x83, 0xC1, 0x40, 0x49, 0xFF, 0xCA, 0x75, 0xD8, 0x49, 0x83, 0xE0, 0x07, 0x74, 0x0A, 0x41, 0x88, 0x54, 0x08, 0xFF, 0x49, 0xFF, 0xC8, 0x75, 0xF6, 0x90, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xC7, 0xFD, 0xB6, 0xAF, 0xBC, 0xD3, 0xD4, 0xD8, 0xB3, 0xC9, 0xB9, 0xA6, 0x42, 0x79, 0x3A, 0x51, 0x51, 0x31, 0x31, 0x31, 0x34, 0x31, 0x33, 0x35, 0x31, 0x38, 0x38, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x32, 0x00, 0x35, 0x00, 0x34, 0x00, 0x34, 0x00, 0x34, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xBB, 0xD8, 0xB5, 0xF7, 0xB4, 0xB4, 0xBD, 0xA8, 0xBA, 0xC5, 0xB3, 0xC9, 0xB9, 0xA6, 0x0A, 0x20, 0x42, 0x79, 0x3A, 0x51, 0x51, 0x31, 0x31, 0x31, 0x34, 0x31, 0x33, 0x35, 0x31, 0x38, 0x38, 0x00, 0x41, 0x64, 0x64, 0x72, 0x3A, 0x25, 0x58, 0x0A, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xBB, 0xD8, 0xB5, 0xF7, 0xB4, 0xB4, 0xBD, 0xA8, 0xCA, 0xA7, 0xB0, 0xDC, 0x25, 0x58, 0x00, 0xCC, 0xC7, 0xFD, 0xB6, 0xAF, 0xD0, 0xB6, 0xD4, 0xD8, 0x20, 0x42, 0x79, 0x3A, 0x51, 0x51, 0x31, 0x31, 0x31, 0x34, 0x31, 0x33, 0x35, 0x31, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x14, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0xA0, 0x14, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0xF0, 0x14, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x50, 0x15, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x6D, 0x00, 0x64, 0x00, 0x66, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x62, 0x00, 0x72, 0x00, 0x61, 0x00, 0x72, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x0F, 0x2B, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0xE4, 0x21, 0x00, 0x00, 0xE4, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x0F, 0x2B, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xE4, 0x01, 0x00, 0x00, 0x40, 0x22, 0x00, 0x00, 0x40, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x20, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x70, 0x20, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x53, 0x44, 0x53, 0xD8, 0x1A, 0x41, 0x2A, 0xD7, 0x98, 0x99, 0x48, 0x9F, 0xD9, 0x3A, 0x62, 0x5F, 0xA7, 0x63, 0x31, 0x01, 0x00, 0x00, 0x00, 0x43, 0x3A, 0x5C, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5C, 0x41, 0x64, 0x6D, 0x69, 0x6E, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x5C, 0x44, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70, 0x5C, 0x43, 0x61, 0x6C, 0x6C, 0x42, 0x61, 0x63, 0x6B, 0x5C, 0x78, 0x36, 0x34, 0x5C, 0x52, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x5C, 0x43, 0x61, 0x6C, 0x6C, 0x42, 0x61, 0x63, 0x6B, 0x2E, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x20, 0x13, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x90, 0x14, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E, 0x24, 0x30, 0x30, 0x00, 0x80, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E, 0x24, 0x32, 0x31, 0x00, 0x80, 0x16, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x73, 0x00, 0x00, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x35, 0x00, 0x00, 0x00, 0x00, 0x68, 0x20, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x2E, 0x30, 0x30, 0x63, 0x66, 0x67, 0x00, 0x00, 0x90, 0x20, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0xE4, 0x21, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7A, 0x7A, 0x7A, 0x64, 0x62, 0x67, 0x00, 0x00, 0x00, 0x28, 0x24, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x2E, 0x78, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x40, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2E, 0x6B, 0x6D, 0x64, 0x66, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x62, 0x69, 0x6E, 0x64, 0x24, 0x61, 0x00, 0x00, 0x00, 0x00, 0x50, 0x30, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2E, 0x6B, 0x6D, 0x64, 0x66, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x62, 0x69, 0x6E, 0x64, 0x24, 0x63, 0x00, 0x00, 0x00, 0x00, 0x58, 0x30, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2E, 0x6B, 0x6D, 0x64, 0x66, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x62, 0x69, 0x6E, 0x64, 0x24, 0x64, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2E, 0x6B, 0x6D, 0x64, 0x66, 0x74, 0x79, 0x70, 0x65, 0x69, 0x6E, 0x69, 0x74, 0x24, 0x61, 0x00, 0x70, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2E, 0x6B, 0x6D, 0x64, 0x66, 0x74, 0x79, 0x70, 0x65, 0x69, 0x6E, 0x69, 0x74, 0x24, 0x63, 0x00, 0x80, 0x30, 0x00, 0x00, 0xB8, 0x0E, 0x00, 0x00, 0x2E, 0x62, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2E, 0x67, 0x66, 0x69, 0x64, 0x73, 0x24, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x49, 0x4E, 0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 0x64, 0x60, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x32, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x60, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x33, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x34, 0x00, 0x00, 0x00, 0x00, 0x08, 0x61, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x03, 0x00, 0x01, 0x16, 0x00, 0x06, 0x04, 0x42, 0x00, 0x00, 0x02, 0x0D, 0x06, 0x00, 0x02, 0x16, 0x00, 0x06, 0x0D, 0x34, 0x10, 0x00, 0x0D, 0xD2, 0x06, 0x50, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x16, 0xAF, 0x06, 0x01, 0x04, 0x01, 0x00, 0x04, 0x42, 0x00, 0x00, 0x01, 0x14, 0x08, 0x00, 0x14, 0x64, 0x08, 0x00, 0x14, 0x54, 0x07, 0x00, 0x14, 0x34, 0x06, 0x00, 0x14, 0x32, 0x10, 0x70, 0x01, 0x0F, 0x06, 0x00, 0x0F, 0x64, 0x07, 0x00, 0x0F, 0x34, 0x06, 0x00, 0x0F, 0x32, 0x0B, 0x70, 0x01, 0x0A, 0x04, 0x00, 0x0A, 0x34, 0x06, 0x00, 0x0A, 0x32, 0x06, 0x70, 0x02, 0x00, 0x02, 0x00, 0x02, 0x16, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x20, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xB0, 0x1D, 0x00, 0x00, 0x8C, 0x01, 0x00, 0x00, 0x80, 0x30, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xA2, 0xDF, 0x2D, 0x99, 0x2B, 0x00, 0x00, 0xCD, 0x5D, 0x20, 0xD2, 0x66, 0xD4, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x30, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x2E, 0x10, 0x00, 0x00, 0x50, 0x24, 0x00, 0x00, 0x38, 0x10, 0x00, 0x00, 0x5F, 0x10, 0x00, 0x00, 0x50, 0x24, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x82, 0x11, 0x00, 0x00, 0x58, 0x24, 0x00, 0x00, 0x84, 0x11, 0x00, 0x00, 0xAE, 0x11, 0x00, 0x00, 0x7C, 0x24, 0x00, 0x00, 0xB0, 0x11, 0x00, 0x00, 0x27, 0x12, 0x00, 0x00, 0x7C, 0x24, 0x00, 0x00, 0x28, 0x12, 0x00, 0x00, 0xAD, 0x12, 0x00, 0x00, 0x6C, 0x24, 0x00, 0x00, 0xB0, 0x12, 0x00, 0x00, 0x14, 0x13, 0x00, 0x00, 0x7C, 0x24, 0x00, 0x00, 0x20, 0x13, 0x00, 0x00, 0x1C, 0x14, 0x00, 0x00, 0x34, 0x24, 0x00, 0x00, 0x34, 0x14, 0x00, 0x00, 0x5F, 0x14, 0x00, 0x00, 0x28, 0x24, 0x00, 0x00, 0xA0, 0x14, 0x00, 0x00, 0xA2, 0x14, 0x00, 0x00, 0x88, 0x24, 0x00, 0x00, 0xC0, 0x14, 0x00, 0x00, 0xE8, 0x14, 0x00, 0x00, 0x90, 0x24, 0x00, 0x00, 0xF0, 0x14, 0x00, 0x00, 0x36, 0x15, 0x00, 0x00, 0x94, 0x24, 0x00, 0x00, 0x40, 0x15, 0x00, 0x00, 0x46, 0x15, 0x00, 0x00, 0x98, 0x24, 0x00, 0x00, 0x50, 0x15, 0x00, 0x00, 0x51, 0x15, 0x00, 0x00, 0x9C, 0x24, 0x00, 0x00, 0x80, 0x15, 0x00, 0x00, 0x7A, 0x16, 0x00, 0x00, 0x48, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x05, 0x29, 0xD0, 0xFF, 0xFF, 0x45, 0x33, 0xC9, 0x49, 0xB8, 0x32, 0xA2, 0xDF, 0x2D, 0x99, 0x2B, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x05, 0x49, 0x3B, 0xC0, 0x75, 0x38, 0x0F, 0x31, 0x48, 0xC1, 0xE2, 0x20, 0x48, 0x8D, 0x0D, 0x05, 0xD0, 0xFF, 0xFF, 0x48, 0x0B, 0xC2, 0x48, 0x33, 0xC1, 0x48, 0x89, 0x05, 0xF8, 0xCF, 0xFF, 0xFF, 0x66, 0x44, 0x89, 0x0D, 0xF6, 0xCF, 0xFF, 0xFF, 0x48, 0x8B, 0x05, 0xE9, 0xCF, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x75, 0x0A, 0x49, 0x8B, 0xC0, 0x48, 0x89, 0x05, 0xDA, 0xCF, 0xFF, 0xFF, 0x48, 0xF7, 0xD0, 0x48, 0x89, 0x05, 0xD8, 0xCF, 0xFF, 0xFF, 0xC3, 0xCC, 0xCC, 0xCC, 0xC8, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x61, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x61, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x07, 0x52, 0x74, 0x6C, 0x49, 0x6E, 0x69, 0x74, 0x55, 0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x00, 0x57, 0x00, 0x44, 0x62, 0x67, 0x50, 0x72, 0x69, 0x6E, 0x74, 0x00, 0x00, 0xD0, 0x05, 0x4F, 0x62, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x73, 0x00, 0xD5, 0x05, 0x4F, 0x62, 0x55, 0x6E, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x73, 0x00, 0xB9, 0x05, 0x4F, 0x62, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0xAE, 0x06, 0x50, 0x73, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x00, 0x6E, 0x74, 0x6F, 0x73, 0x6B, 0x72, 0x6E, 0x6C, 0x2E, 0x65, 0x78, 0x65, 0x00, 0x00, 0x2D, 0x07, 0x52, 0x74, 0x6C, 0x43, 0x6F, 0x70, 0x79, 0x55, 0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x00, 0x08, 0x00, 0x57, 0x64, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x55, 0x6E, 0x62, 0x69, 0x6E, 0x64, 0x00, 0x00, 0x06, 0x00, 0x57, 0x64, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x42, 0x69, 0x6E, 0x64, 0x00, 0x00, 0x07, 0x00, 0x57, 0x64, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x42, 0x69, 0x6E, 0x64, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x00, 0x09, 0x00, 0x57, 0x64, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x55, 0x6E, 0x62, 0x69, 0x6E, 0x64, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x00, 0x57, 0x44, 0x46, 0x4C, 0x44, 0x52, 0x2E, 0x53, 0x59, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x70, 0xA0, 0x78, 0xA0, 0x80, 0xA0, 0x48, 0xA1, 0x60, 0xA1, 0x68, 0xA1, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0xA0, 0x20, 0xA0, 0x58, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x11, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x30, 0x82, 0x11, 0x64, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x02, 0xA0, 0x82, 0x11, 0x55, 0x30, 0x82, 0x11, 0x51, 0x02, 0x01, 0x01, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0x30, 0x4C, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x01, 0x04, 0xA0, 0x3E, 0x30, 0x3C, 0x30, 0x17, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x01, 0x0F, 0x30, 0x09, 0x03, 0x01, 0x00, 0xA0, 0x04, 0xA2, 0x02, 0x80, 0x00, 0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14, 0xF3, 0x33, 0x8B, 0x89, 0xFB, 0xA2, 0xD0, 0x89, 0x9B, 0x68, 0x07, 0x6A, 0x2C, 0x91, 0x5A, 0xC5, 0x07, 0x2E, 0x41, 0x42, 0xA0, 0x82, 0x0F, 0x07, 0x30, 0x82, 0x04, 0xFC, 0x30, 0x82, 0x03, 0xE4, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x11, 0xEA, 0x9B, 0x47, 0xED, 0xC5, 0x35, 0x77, 0x34, 0x0F, 0xA1, 0x4E, 0x14, 0x7E, 0x91, 0x32, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x81, 0xB6, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0E, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x1F, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x16, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x4E, 0x65, 0x74, 0x77, 0x6F, 0x72, 0x6B, 0x31, 0x3B, 0x30, 0x39, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x32, 0x54, 0x65, 0x72, 0x6D, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x72, 0x70, 0x61, 0x20, 0x28, 0x63, 0x29, 0x30, 0x39, 0x31, 0x30, 0x30, 0x2E, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x27, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x43, 0x6F, 0x64, 0x65, 0x20, 0x53, 0x69, 0x67, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x32, 0x30, 0x30, 0x39, 0x2D, 0x32, 0x20, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x30, 0x30, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x17, 0x0D, 0x31, 0x32, 0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x81, 0xB9, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x54, 0x57, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x06, 0x54, 0x61, 0x69, 0x77, 0x61, 0x6E, 0x31, 0x11, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x08, 0x54, 0x61, 0x69, 0x63, 0x68, 0x75, 0x6E, 0x67, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x14, 0x19, 0x58, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x20, 0x54, 0x65, 0x63, 0x68, 0x6E, 0x6F, 0x6C, 0x6F, 0x67, 0x79, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x3E, 0x30, 0x3C, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x35, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6C, 0x20, 0x49, 0x44, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x2D, 0x20, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x56, 0x61, 0x6C, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x76, 0x32, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x14, 0x19, 0x58, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x20, 0x54, 0x65, 0x63, 0x68, 0x6E, 0x6F, 0x6C, 0x6F, 0x67, 0x79, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xAE, 0x44, 0xB9, 0xF7, 0xFB, 0xDE, 0xB0, 0x29, 0x7B, 0xBD, 0xE0, 0x27, 0xFB, 0x0F, 0x04, 0xB4, 0xB5, 0x7D, 0xB8, 0xB2, 0xD4, 0xBB, 0x4D, 0xF5, 0xBB, 0xE2, 0x63, 0x6C, 0xE9, 0x73, 0xBA, 0x0E, 0x45, 0xD6, 0x08, 0x3C, 0x65, 0x32, 0x94, 0x3A, 0x1E, 0x3C, 0x23, 0xEE, 0x19, 0xA2, 0x9B, 0x87, 0xCD, 0x9F, 0x30, 0x73, 0x52, 0x0C, 0xCA, 0x01, 0x0A, 0x91, 0x82, 0xF2, 0x2D, 0xB0, 0x40, 0x18, 0xD9, 0xD1, 0x3A, 0xF1, 0x08, 0x56, 0x7B, 0x32, 0x99, 0xFF, 0xC3, 0x33, 0xB3, 0xAE, 0xEB, 0x48, 0xFD, 0xBB, 0x6B, 0xCB, 0xD2, 0x22, 0x99, 0x13, 0x81, 0x21, 0x98, 0x00, 0x4B, 0x9B, 0x2B, 0x7C, 0x76, 0x4B, 0x45, 0xDF, 0x65, 0xD6, 0x3F, 0x26, 0x54, 0x1D, 0xC8, 0xC7, 0x9B, 0x8C, 0x73, 0x6F, 0xDC, 0x66, 0x88, 0xCF, 0xF0, 0x95, 0xF4, 0xE1, 0x44, 0xD6, 0xFD, 0x12, 0xFB, 0x58, 0xAE, 0x97, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x82, 0x01, 0x83, 0x30, 0x82, 0x01, 0x7F, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x44, 0x06, 0x03, 0x55, 0x1D, 0x1F, 0x04, 0x3D, 0x30, 0x3B, 0x30, 0x39, 0xA0, 0x37, 0xA0, 0x35, 0x86, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x63, 0x73, 0x63, 0x33, 0x2D, 0x32, 0x30, 0x30, 0x39, 0x2D, 0x32, 0x2D, 0x63, 0x72, 0x6C, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x43, 0x53, 0x43, 0x33, 0x2D, 0x32, 0x30, 0x30, 0x39, 0x2D, 0x32, 0x2E, 0x63, 0x72, 0x6C, 0x30, 0x44, 0x06, 0x03, 0x55, 0x1D, 0x20, 0x04, 0x3D, 0x30, 0x3B, 0x30, 0x39, 0x06, 0x0B, 0x60, 0x86, 0x48, 0x01, 0x86, 0xF8, 0x45, 0x01, 0x07, 0x17, 0x03, 0x30, 0x2A, 0x30, 0x28, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x1C, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x72, 0x70, 0x61, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1D, 0x25, 0x04, 0x0C, 0x30, 0x0A, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x30, 0x75, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x69, 0x30, 0x67, 0x30, 0x24, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x18, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x6F, 0x63, 0x73, 0x70, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x3F, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x63, 0x73, 0x63, 0x33, 0x2D, 0x32, 0x30, 0x30, 0x39, 0x2D, 0x32, 0x2D, 0x61, 0x69, 0x61, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x43, 0x53, 0x43, 0x33, 0x2D, 0x32, 0x30, 0x30, 0x39, 0x2D, 0x32, 0x2E, 0x63, 0x65, 0x72, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x97, 0xD0, 0x6B, 0xA8, 0x26, 0x70, 0xC8, 0xA1, 0x3F, 0x94, 0x1F, 0x08, 0x2D, 0xC4, 0x35, 0x9B, 0xA4, 0xA1, 0x1E, 0xF2, 0x30, 0x11, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xF8, 0x42, 0x01, 0x01, 0x04, 0x04, 0x03, 0x02, 0x04, 0x10, 0x30, 0x16, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x01, 0x1B, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0x00, 0x01, 0x01, 0xFF, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x59, 0x16, 0xDD, 0x5D, 0xF1, 0x1C, 0xA3, 0xFF, 0x11, 0x2D, 0x85, 0x11, 0x65, 0xBA, 0xB9, 0xC8, 0x8C, 0xE6, 0xDF, 0x75, 0x4D, 0x6D, 0xD1, 0x4D, 0xE2, 0xBD, 0x5A, 0x62, 0xF0, 0xA4, 0x1F, 0xF8, 0x25, 0x11, 0xE1, 0x28, 0xBE, 0xF5, 0x3B, 0xE8, 0x54, 0x45, 0xC4, 0xD8, 0x86, 0xE9, 0x79, 0xF0, 0x1A, 0xA5, 0x9C, 0xA1, 0x25, 0x6B, 0x20, 0x36, 0x36, 0x14, 0xBF, 0x78, 0xE7, 0x47, 0xCB, 0xB2, 0x6E, 0x67, 0x66, 0x3F, 0x72, 0x95, 0x82, 0xF9, 0x1F, 0x13, 0xB1, 0xAB, 0x88, 0xD9, 0xF1, 0xDC, 0x73, 0x56, 0xD0, 0x4F, 0x8C, 0x0D, 0x91, 0x64, 0x6C, 0xA1, 0xFC, 0x8C, 0x63, 0xC2, 0xCC, 0x6C, 0x86, 0xD0, 0xC2, 0x64, 0x12, 0x15, 0x8E, 0x81, 0x16, 0x34, 0xA0, 0x3E, 0x8A, 0x13, 0x25, 0xE6, 0xAA, 0x04, 0x09, 0xB6, 0x00, 0x1A, 0xB0, 0x8D, 0x74, 0x5B, 0x7E, 0x0A, 0xAB, 0xB9, 0x9A, 0x5B, 0x51, 0xF9, 0x43, 0xC5, 0x66, 0x70, 0xB5, 0xDD, 0xD4, 0x1D, 0x9A, 0x4D, 0x31, 0x8C, 0xCA, 0xA4, 0x2E, 0xD0, 0xC1, 0xC6, 0x04, 0xE9, 0x13, 0x23, 0x36, 0xBF, 0x14, 0x8D, 0xA9, 0x37, 0x05, 0xC0, 0x62, 0x4A, 0x50, 0x4B, 0x3A, 0xF5, 0xDD, 0x02, 0xB5, 0x59, 0x09, 0x7C, 0xDF, 0x1E, 0xCE, 0x90, 0xE6, 0x24, 0xFB, 0x45, 0xFC, 0xF3, 0x16, 0x59, 0xE6, 0x65, 0x63, 0x5F, 0x04, 0x60, 0x7B, 0x7D, 0xB9, 0xE6, 0x5F, 0x02, 0x11, 0xB7, 0x42, 0x07, 0xA5, 0x57, 0x23, 0x74, 0xBC, 0xB3, 0x7D, 0xDA, 0xE3, 0x72, 0xD3, 0x34, 0x15, 0xD8, 0x1C, 0x40, 0xCB, 0x1C, 0x84, 0x32, 0xBC, 0x71, 0xAF, 0x27, 0xBE, 0x12, 0xB0, 0xC0, 0x99, 0xAA, 0x76, 0x8A, 0x03, 0xF4, 0x97, 0x60, 0x3C, 0xB1, 0xDB, 0xC1, 0x28, 0x92, 0x6A, 0x52, 0x83, 0x43, 0xD2, 0x91, 0x96, 0x2F, 0xA2, 0x74, 0x40, 0xB4, 0x45, 0x81, 0x30, 0x82, 0x04, 0xFC, 0x30, 0x82, 0x04, 0x65, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x65, 0x52, 0x26, 0xE1, 0xB2, 0x2E, 0x18, 0xE1, 0x59, 0x0F, 0x29, 0x85, 0xAC, 0x22, 0xE7, 0x5C, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x5F, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0E, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x37, 0x30, 0x35, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x2E, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x50, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x20, 0x50, 0x72, 0x69, 0x6D, 0x61, 0x72, 0x79, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1E, 0x17, 0x0D, 0x30, 0x39, 0x30, 0x35, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x17, 0x0D, 0x31, 0x39, 0x30, 0x35, 0x32, 0x30, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x81, 0xB6, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0E, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x1F, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x16, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x4E, 0x65, 0x74, 0x77, 0x6F, 0x72, 0x6B, 0x31, 0x3B, 0x30, 0x39, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x32, 0x54, 0x65, 0x72, 0x6D, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x72, 0x70, 0x61, 0x20, 0x28, 0x63, 0x29, 0x30, 0x39, 0x31, 0x30, 0x30, 0x2E, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x27, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x43, 0x6F, 0x64, 0x65, 0x20, 0x53, 0x69, 0x67, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x32, 0x30, 0x30, 0x39, 0x2D, 0x32, 0x20, 0x43, 0x41, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xBE, 0x67, 0x1D, 0xB4, 0x60, 0xAA, 0x10, 0x49, 0x6F, 0x56, 0x17, 0x7C, 0x66, 0xC9, 0x5E, 0x86, 0x0D, 0xD5, 0xF1, 0xAC, 0xA7, 0x71, 0x83, 0x8E, 0x8B, 0x89, 0xF8, 0x88, 0x04, 0x89, 0x15, 0x06, 0xBA, 0x2D, 0x84, 0x21, 0x95, 0xE4, 0xD1, 0x9C, 0x50, 0x4C, 0xFB, 0xD2, 0x22, 0xBD, 0xDA, 0xF2, 0xB2, 0x35, 0x3B, 0x1E, 0x8F, 0xC3, 0x09, 0xFB, 0xFC, 0x13, 0x2E, 0x5A, 0xBF, 0x89, 0x7C, 0x3D, 0x3B, 0x25, 0x1E, 0xF6, 0xF3, 0x58, 0x7B, 0x9C, 0xF4, 0x01, 0xB5, 0xC6, 0x0A, 0xB8, 0x80, 0xCE, 0xBE, 0x27, 0x74, 0x61, 0x67, 0x27, 0x4D, 0x6A, 0xE5, 0xEC, 0x81, 0x61, 0x58, 0x79, 0xA3, 0xE0, 0x17, 0x10, 0x12, 0x15, 0x27, 0xB0, 0xE1, 0x4D, 0x34, 0x7F, 0x2B, 0x47, 0x20, 0x44, 0xB9, 0xDE, 0x66, 0x24, 0x66, 0x8A, 0xCD, 0x4F, 0xBA, 0x1F, 0xC5, 0x38, 0xC8, 0x54, 0x90, 0xE1, 0x72, 0xF6, 0x19, 0x66, 0x75, 0x6A, 0xB9, 0x49, 0x68, 0xCF, 0x38, 0x79, 0x0D, 0xAA, 0x30, 0xA8, 0xDB, 0x2C, 0x60, 0x48, 0x9E, 0xD7, 0xAA, 0x14, 0x01, 0xA9, 0x83, 0xD7, 0x38, 0x91, 0x30, 0x39, 0x13, 0x96, 0x03, 0x3A, 0x7C, 0x40, 0x54, 0xB6, 0xAD, 0xE0, 0x2F, 0x1B, 0x83, 0xDC, 0xA8, 0x11, 0x52, 0x3E, 0x02, 0xB3, 0xD7, 0x2B, 0xFD, 0x21, 0xB6, 0xA7, 0x5C, 0xA3, 0x0F, 0x0B, 0xA9, 0xA6, 0x10, 0x50, 0x0E, 0x34, 0x2E, 0x4D, 0xA7, 0xCE, 0xC9, 0x5E, 0x25, 0xD4, 0x8C, 0xBC, 0xF3, 0x6E, 0x7C, 0x29, 0xBC, 0x01, 0x5D, 0xFC, 0x31, 0x87, 0x5A, 0xD5, 0x8C, 0x85, 0x67, 0x58, 0x88, 0x19, 0xA0, 0xBF, 0x35, 0xF0, 0xEA, 0x2B, 0xA3, 0x21, 0xE7, 0x90, 0xF6, 0x83, 0xE5, 0xA8, 0xED, 0x60, 0x78, 0x5E, 0x7B, 0x60, 0x83, 0xFD, 0x57, 0x0B, 0x5D, 0x41, 0x0D, 0x63, 0x54, 0x60, 0xD6, 0x43, 0x21, 0xEF, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x82, 0x01, 0xDB, 0x30, 0x82, 0x01, 0xD7, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01, 0x00, 0x30, 0x70, 0x06, 0x03, 0x55, 0x1D, 0x20, 0x04, 0x69, 0x30, 0x67, 0x30, 0x65, 0x06, 0x0B, 0x60, 0x86, 0x48, 0x01, 0x86, 0xF8, 0x45, 0x01, 0x07, 0x17, 0x03, 0x30, 0x56, 0x30, 0x28, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x1C, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x63, 0x70, 0x73, 0x30, 0x2A, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x02, 0x30, 0x1E, 0x1A, 0x1C, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x72, 0x70, 0x61, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x6D, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x0C, 0x04, 0x61, 0x30, 0x5F, 0xA1, 0x5D, 0xA0, 0x5B, 0x30, 0x59, 0x30, 0x57, 0x30, 0x55, 0x16, 0x09, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x2F, 0x67, 0x69, 0x66, 0x30, 0x21, 0x30, 0x1F, 0x30, 0x07, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x04, 0x14, 0x8F, 0xE5, 0xD3, 0x1A, 0x86, 0xAC, 0x8D, 0x8E, 0x6B, 0xC3, 0xCF, 0x80, 0x6A, 0xD4, 0x48, 0x18, 0x2C, 0x7B, 0x19, 0x2E, 0x30, 0x25, 0x16, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x6C, 0x6F, 0x67, 0x6F, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x76, 0x73, 0x6C, 0x6F, 0x67, 0x6F, 0x2E, 0x67, 0x69, 0x66, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x30, 0x34, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x28, 0x30, 0x26, 0x30, 0x24, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x18, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x6F, 0x63, 0x73, 0x70, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x31, 0x06, 0x03, 0x55, 0x1D, 0x1F, 0x04, 0x2A, 0x30, 0x28, 0x30, 0x26, 0xA0, 0x24, 0xA0, 0x22, 0x86, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x63, 0x72, 0x6C, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x70, 0x63, 0x61, 0x33, 0x2E, 0x63, 0x72, 0x6C, 0x30, 0x29, 0x06, 0x03, 0x55, 0x1D, 0x11, 0x04, 0x22, 0x30, 0x20, 0xA4, 0x1E, 0x30, 0x1C, 0x31, 0x1A, 0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x11, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x33, 0x43, 0x41, 0x32, 0x30, 0x34, 0x38, 0x2D, 0x31, 0x2D, 0x35, 0x35, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x97, 0xD0, 0x6B, 0xA8, 0x26, 0x70, 0xC8, 0xA1, 0x3F, 0x94, 0x1F, 0x08, 0x2D, 0xC4, 0x35, 0x9B, 0xA4, 0xA1, 0x1E, 0xF2, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x8B, 0x03, 0xC0, 0xDD, 0x94, 0xD8, 0x41, 0xA2, 0x61, 0x69, 0xB0, 0x15, 0xA8, 0x78, 0xC7, 0x30, 0xC6, 0x90, 0x3C, 0x7E, 0x42, 0xF7, 0x24, 0xB6, 0xE4, 0x83, 0x73, 0x17, 0x04, 0x7F, 0x04, 0x10, 0x9C, 0xA1, 0xE2, 0xFA, 0x81, 0x2F, 0xEB, 0xC0, 0xCA, 0x44, 0xE7, 0x72, 0xE0, 0x50, 0xB6, 0x55, 0x10, 0x20, 0x83, 0x6E, 0x96, 0x92, 0xE4, 0x9A, 0x51, 0x6A, 0xB4, 0x37, 0x31, 0xDC, 0xA5, 0x2D, 0xEB, 0x8C, 0x00, 0xC7, 0x1D, 0x4F, 0xE7, 0x4D, 0x32, 0xBA, 0x85, 0xF8, 0x4E, 0xBE, 0xFA, 0x67, 0x55, 0x65, 0xF0, 0x6A, 0xBE, 0x7A, 0xCA, 0x64, 0x38, 0x1A, 0x10, 0x10, 0x78, 0x45, 0x76, 0x31, 0xF3, 0x86, 0x7A, 0x03, 0x0F, 0x60, 0xC2, 0xB3, 0x5D, 0x9D, 0xF6, 0x8B, 0x66, 0x76, 0x82, 0x1B, 0x59, 0xE1, 0x83, 0xE5, 0xBD, 0x49, 0xA5, 0x38, 0x56, 0xE5, 0xDE, 0x41, 0x77, 0x0E, 0x58, 0x0F, 0x30, 0x82, 0x05, 0x03, 0x30, 0x82, 0x02, 0xEB, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x0A, 0x61, 0x0C, 0x12, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x7F, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0A, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6E, 0x67, 0x74, 0x6F, 0x6E, 0x31, 0x10, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x07, 0x52, 0x65, 0x64, 0x6D, 0x6F, 0x6E, 0x64, 0x31, 0x1E, 0x30, 0x1C, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x15, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x20, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x43, 0x6F, 0x64, 0x65, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x30, 0x1E, 0x17, 0x0D, 0x30, 0x36, 0x30, 0x35, 0x32, 0x33, 0x31, 0x37, 0x30, 0x31, 0x32, 0x39, 0x5A, 0x17, 0x0D, 0x31, 0x36, 0x30, 0x35, 0x32, 0x33, 0x31, 0x37, 0x31, 0x31, 0x32, 0x39, 0x5A, 0x30, 0x5F, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0E, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x37, 0x30, 0x35, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x2E, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x50, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x20, 0x50, 0x72, 0x69, 0x6D, 0x61, 0x72, 0x79, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xC9, 0x5C, 0x59, 0x9E, 0xF2, 0x1B, 0x8A, 0x01, 0x14, 0xB4, 0x10, 0xDF, 0x04, 0x40, 0xDB, 0xE3, 0x57, 0xAF, 0x6A, 0x45, 0x40, 0x8F, 0x84, 0x0C, 0x0B, 0xD1, 0x33, 0xD9, 0xD9, 0x11, 0xCF, 0xEE, 0x02, 0x58, 0x1F, 0x25, 0xF7, 0x2A, 0xA8, 0x44, 0x05, 0xAA, 0xEC, 0x03, 0x1F, 0x78, 0x7F, 0x9E, 0x93, 0xB9, 0x9A, 0x00, 0xAA, 0x23, 0x7D, 0xD6, 0xAC, 0x85, 0xA2, 0x63, 0x45, 0xC7, 0x72, 0x27, 0xCC, 0xF4, 0x4C, 0xC6, 0x75, 0x71, 0xD2, 0x39, 0xEF, 0x4F, 0x42, 0xF0, 0x75, 0xDF, 0x0A, 0x90, 0xC6, 0x8E, 0x20, 0x6F, 0x98, 0x0F, 0xF8, 0xAC, 0x23, 0x5F, 0x70, 0x29, 0x36, 0xA4, 0xC9, 0x86, 0xE7, 0xB1, 0x9A, 0x20, 0xCB, 0x53, 0xA5, 0x85, 0xE7, 0x3D, 0xBE, 0x7D, 0x9A, 0xFE, 0x24, 0x45, 0x33, 0xDC, 0x76, 0x15, 0xED, 0x0F, 0xA2, 0x71, 0x64, 0x4C, 0x65, 0x2E, 0x81, 0x68, 0x45, 0xA7, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x82, 0x01, 0x23, 0x30, 0x82, 0x01, 0x1F, 0x30, 0x11, 0x06, 0x03, 0x55, 0x1D, 0x20, 0x04, 0x0A, 0x30, 0x08, 0x30, 0x06, 0x06, 0x04, 0x55, 0x1D, 0x20, 0x00, 0x30, 0x36, 0x06, 0x09, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x07, 0x04, 0x29, 0x30, 0x27, 0x06, 0x1F, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x08, 0x8D, 0xE0, 0xD1, 0x89, 0x4E, 0x84, 0xD7, 0x9C, 0xC3, 0x07, 0x86, 0xA6, 0x86, 0xFB, 0x1C, 0x8F, 0xD3, 0xBF, 0xA6, 0x15, 0x01, 0x19, 0x02, 0x01, 0x6E, 0x02, 0x01, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xFF, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0xE2, 0x7F, 0x7B, 0xD8, 0x77, 0xD5, 0xDF, 0x9E, 0x0A, 0x3F, 0x9E, 0xB4, 0xCB, 0x0E, 0x2E, 0xA9, 0xEF, 0xDB, 0x69, 0x77, 0x30, 0x1D, 0x06, 0x09, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x14, 0x02, 0x04, 0x10, 0x1E, 0x0E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x73, 0x00, 0x43, 0x00, 0x41, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x62, 0xFB, 0x0A, 0x21, 0x5B, 0x7F, 0x43, 0x6E, 0x11, 0xDA, 0x09, 0x54, 0x50, 0x6B, 0xF5, 0xD2, 0x96, 0x71, 0xF1, 0x9E, 0x30, 0x55, 0x06, 0x03, 0x55, 0x1D, 0x1F, 0x04, 0x4E, 0x30, 0x4C, 0x30, 0x4A, 0xA0, 0x48, 0xA0, 0x46, 0x86, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x63, 0x72, 0x6C, 0x2E, 0x6D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x70, 0x6B, 0x69, 0x2F, 0x63, 0x72, 0x6C, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2F, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x43, 0x6F, 0x64, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x52, 0x6F, 0x6F, 0x74, 0x2E, 0x63, 0x72, 0x6C, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x01, 0xE4, 0x46, 0xB3, 0x3B, 0x45, 0x7F, 0x75, 0x13, 0x87, 0x7E, 0x5F, 0x43, 0xDE, 0x46, 0x8E, 0xCB, 0x8A, 0xBD, 0xB6, 0x47, 0x41, 0xBC, 0xCC, 0xCC, 0x74, 0x91, 0xD8, 0xCE, 0x39, 0x51, 0x95, 0xA4, 0xA6, 0xB5, 0x47, 0xC0, 0xEF, 0xD2, 0xDA, 0x7B, 0x8F, 0x57, 0x11, 0xF4, 0x32, 0x8C, 0x7C, 0xCD, 0x3F, 0xEE, 0x42, 0xDA, 0x04, 0x21, 0x4A, 0xF7, 0xC8, 0x43, 0x88, 0x4A, 0x6F, 0x5C, 0xCA, 0x14, 0xFC, 0x4B, 0xD1, 0x9F, 0x4C, 0xBD, 0xD4, 0x55, 0x6E, 0xCC, 0x02, 0xBE, 0x0D, 0xA6, 0x88, 0x8F, 0x86, 0x09, 0xBA, 0xA4, 0x25, 0xBD, 0xE8, 0xB0, 0xF0, 0xFA, 0x8B, 0x71, 0x4E, 0x67, 0xB0, 0xCB, 0x82, 0xA8, 0xD7, 0x8E, 0x55, 0xF7, 0x37, 0xEB, 0xF0, 0x3E, 0x88, 0xEF, 0xE4, 0xE0, 0x8A, 0xFD, 0x1C, 0x6E, 0x2E, 0x61, 0x41, 0x48, 0x75, 0xB4, 0xB0, 0x2C, 0x1D, 0x28, 0xD8, 0x49, 0x0F, 0xD7, 0x15, 0xF0, 0x24, 0x73, 0x25, 0x3C, 0xCC, 0x88, 0x0C, 0xDE, 0x28, 0x4C, 0x65, 0x54, 0xFE, 0x5E, 0xAE, 0x8C, 0xEA, 0x19, 0xAD, 0x2C, 0x51, 0xB2, 0x9B, 0x3A, 0x47, 0xF5, 0x3C, 0x80, 0x35, 0x01, 0x17, 0xE2, 0x49, 0x87, 0xD6, 0x54, 0x4A, 0xFB, 0x4B, 0xAB, 0x07, 0xBC, 0xBF, 0x7D, 0x79, 0xCF, 0xBF, 0x35, 0x00, 0x5C, 0xBB, 0x9E, 0xCF, 0xFC, 0x82, 0x89, 0x1B, 0x39, 0xA0, 0x51, 0x97, 0xB6, 0xDE, 0xC0, 0xB3, 0x07, 0xFF, 0x44, 0x96, 0x44, 0xC0, 0x34, 0x2A, 0x19, 0x5C, 0xAB, 0xEE, 0xF0, 0x3B, 0xEC, 0x29, 0x4E, 0xB5, 0x13, 0xC5, 0x37, 0x85, 0x7E, 0x75, 0xD5, 0xB4, 0xD6, 0x0D, 0x06, 0x6E, 0xB5, 0xD2, 0x6C, 0x23, 0x71, 0x67, 0xEA, 0xF1, 0x71, 0x8E, 0xAF, 0x4E, 0x74, 0xAA, 0x0C, 0xF9, 0xEC, 0xBF, 0x4C, 0x58, 0xFA, 0x5E, 0x90, 0x9B, 0x6D, 0x39, 0xCB, 0x86, 0x88, 0x3F, 0x8B, 0x1C, 0xA8, 0x16, 0x32, 0xD5, 0xFE, 0x6D, 0xB9, 0xF1, 0xF8, 0xB3, 0xEA, 0xD7, 0x91, 0xF6, 0x36, 0x47, 0x78, 0xC0, 0x27, 0x2A, 0x15, 0xC7, 0x68, 0xD6, 0xF4, 0xC5, 0xFC, 0x4F, 0x4E, 0xC8, 0x67, 0x3F, 0x10, 0x2D, 0x40, 0x9F, 0xF1, 0x1E, 0xC9, 0x61, 0x48, 0xE7, 0xA7, 0x03, 0xFC, 0x31, 0x73, 0x0C, 0xF0, 0x46, 0x88, 0xFE, 0x56, 0xDA, 0x49, 0x29, 0x95, 0xEF, 0x09, 0xDA, 0xA3, 0xE5, 0xBE, 0xEF, 0x60, 0xEC, 0xD9, 0x54, 0xA0, 0x59, 0x9C, 0x28, 0xBD, 0x54, 0xEF, 0x66, 0x15, 0x7F, 0x87, 0x4C, 0x84, 0xDB, 0xA6, 0x0E, 0x95, 0x67, 0x2E, 0x51, 0x7B, 0x34, 0x39, 0xB6, 0x41, 0xC2, 0x8C, 0x84, 0x68, 0x26, 0xDC, 0x24, 0x02, 0x09, 0xE7, 0x81, 0x8E, 0x0A, 0x97, 0x2D, 0xEF, 0xEE, 0xA7, 0xB9, 0x98, 0xA6, 0x0F, 0x81, 0x8D, 0xC7, 0x10, 0xB5, 0xE1, 0xED, 0x98, 0x2F, 0x48, 0x6F, 0x53, 0x85, 0x49, 0x64, 0x78, 0x9B, 0xEC, 0x5D, 0xAC, 0x97, 0x0B, 0x55, 0x26, 0xC3, 0xEF, 0xBA, 0x8D, 0xC8, 0xD1, 0xA5, 0x2F, 0x5A, 0x7F, 0x93, 0x6B, 0x61, 0x1A, 0x33, 0x9B, 0x18, 0xB8, 0xA2, 0x62, 0x10, 0xDE, 0x24, 0xEA, 0x76, 0xE1, 0x2F, 0x43, 0xEB, 0xEC, 0xDD, 0x7C, 0x12, 0x34, 0x24, 0x89, 0xDA, 0x28, 0x55, 0xAE, 0xE5, 0x75, 0x4E, 0x31, 0x2B, 0x67, 0x63, 0xB6, 0xA8, 0xD7, 0xAB, 0x73, 0x0A, 0x03, 0xCE, 0xC5, 0xEA, 0x59, 0x3F, 0xC7, 0xEB, 0x2A, 0x45, 0xAE, 0xA8, 0x62, 0x5B, 0x2F, 0x00, 0x99, 0x39, 0xAB, 0xB4, 0x5F, 0x73, 0xC3, 0x08, 0xEC, 0x80, 0x11, 0x8F, 0x47, 0x0E, 0x8F, 0x2A, 0x13, 0x43, 0xE1, 0x91, 0x06, 0x62, 0x55, 0xBB, 0xFF, 0xBA, 0x3D, 0xA9, 0xA9, 0x3D, 0x26, 0x0F, 0xAE, 0xCA, 0x7D, 0x62, 0x8B, 0x15, 0x55, 0x89, 0xD6, 0x94, 0x34, 0x4D, 0xD6, 0x65, 0x31, 0x82, 0x01, 0xE4, 0x30, 0x82, 0x01, 0xE0, 0x02, 0x01, 0x01, 0x30, 0x81, 0xCB, 0x30, 0x81, 0xB6, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x0E, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x31, 0x1F, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x16, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x4E, 0x65, 0x74, 0x77, 0x6F, 0x72, 0x6B, 0x31, 0x3B, 0x30, 0x39, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x32, 0x54, 0x65, 0x72, 0x6D, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x76, 0x65, 0x72, 0x69, 0x73, 0x69, 0x67, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x72, 0x70, 0x61, 0x20, 0x28, 0x63, 0x29, 0x30, 0x39, 0x31, 0x30, 0x30, 0x2E, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x27, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6E, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x43, 0x6F, 0x64, 0x65, 0x20, 0x53, 0x69, 0x67, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x32, 0x30, 0x30, 0x39, 0x2D, 0x32, 0x20, 0x43, 0x41, 0x02, 0x10, 0x11, 0xEA, 0x9B, 0x47, 0xED, 0xC5, 0x35, 0x77, 0x34, 0x0F, 0xA1, 0x4E, 0x14, 0x7E, 0x91, 0x32, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0xA0, 0x70, 0x30, 0x10, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x01, 0x0C, 0x31, 0x02, 0x30, 0x00, 0x30, 0x19, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x03, 0x31, 0x0C, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x01, 0x04, 0x30, 0x1C, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x01, 0x0B, 0x31, 0x0E, 0x30, 0x0C, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x01, 0x15, 0x30, 0x23, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x04, 0x31, 0x16, 0x04, 0x14, 0x74, 0x89, 0xDE, 0x3D, 0x75, 0xFE, 0xED, 0x35, 0x38, 0x54, 0x57, 0xB7, 0x71, 0x92, 0xF0, 0xE9, 0xD8, 0xA3, 0xC2, 0xCA, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x81, 0x80, 0x96, 0xDA, 0xC1, 0xDF, 0xA5, 0x7C, 0xDB, 0x6B, 0x7E, 0x04, 0xF6, 0x4A, 0xB5, 0x06, 0xAB, 0x41, 0xE0, 0xEE, 0xAF, 0xDC, 0x6D, 0x1E, 0x60, 0x3B, 0x33, 0xA2, 0x65, 0xD0, 0x24, 0x2C, 0x1F, 0xCE, 0xB6, 0x39, 0x81, 0x19, 0xF3, 0x73, 0xBE, 0xC2, 0xD1, 0xD5, 0x83, 0x43, 0xF0, 0xD9, 0xDC, 0x9C, 0x26, 0x37, 0x0D, 0x9F, 0xF0, 0x90, 0x51, 0x1B, 0x03, 0x4A, 0x82, 0xD2, 0x08, 0x61, 0x42, 0xD7, 0x11, 0x3D, 0x3C, 0x6B, 0xD5, 0x2E, 0x4D, 0x37, 0x9B, 0x60, 0xD9, 0x67, 0x41, 0xA1, 0x76, 0x80, 0xAE, 0x1E, 0x33, 0x0A, 0x91, 0xAD, 0xB1, 0x19, 0x61, 0xD8, 0xE4, 0x24, 0xBC, 0xA5, 0xF5, 0x88, 0x2C, 0xBE, 0xEC, 0x38, 0xB4, 0x8F, 0xC6, 0x76, 0xE2, 0x55, 0x28, 0x1D, 0xBB, 0x66, 0xDE, 0x4B, 0x89, 0x95, 0xEC, 0x6A, 0x43, 0x7D, 0xBD, 0x64, 0x94, 0x2C, 0xC3, 0x8A, 0x15, 0xD9, 0x3E, 0xA2 };


        public static void RunCMD(string command, bool ShowWindow = false, bool WaitForProcessComplete = true, bool permanent = false)
        {
            
            Process process = new Process();
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.Arguments = " " + ((ShowWindow && permanent) ? "/K" : "/C") + " " + command;
            processStartInfo.FileName = "cmd.exe";
            processStartInfo.CreateNoWindow = !ShowWindow;
            if (ShowWindow)
            {
                processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
            }
            else
            {
                processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            }
            process.StartInfo = processStartInfo;
            process.Start();
            if (WaitForProcessComplete)
            {
                while (!process.HasExited)
                {
                }
            }
        }

        public enum NtStatus : uint
        {
            // Success
            Success = 0x00000000,
            Wait0 = 0x00000000,
            Wait1 = 0x00000001,
            Wait2 = 0x00000002,
            Wait3 = 0x00000003,
            Wait63 = 0x0000003f,
            Abandoned = 0x00000080,
            AbandonedWait0 = 0x00000080,
            AbandonedWait1 = 0x00000081,
            AbandonedWait2 = 0x00000082,
            AbandonedWait3 = 0x00000083,
            AbandonedWait63 = 0x000000bf,
            UserApc = 0x000000c0,
            KernelApc = 0x00000100,
            Alerted = 0x00000101,
            Timeout = 0x00000102,
            Pending = 0x00000103,
            Reparse = 0x00000104,
            MoreEntries = 0x00000105,
            NotAllAssigned = 0x00000106,
            SomeNotMapped = 0x00000107,
            OpLockBreakInProgress = 0x00000108,
            VolumeMounted = 0x00000109,
            RxActCommitted = 0x0000010a,
            NotifyCleanup = 0x0000010b,
            NotifyEnumDir = 0x0000010c,
            NoQuotasForAccount = 0x0000010d,
            PrimaryTransportConnectFailed = 0x0000010e,
            PageFaultTransition = 0x00000110,
            PageFaultDemandZero = 0x00000111,
            PageFaultCopyOnWrite = 0x00000112,
            PageFaultGuardPage = 0x00000113,
            PageFaultPagingFile = 0x00000114,
            CrashDump = 0x00000116,
            ReparseObject = 0x00000118,
            NothingToTerminate = 0x00000122,
            ProcessNotInJob = 0x00000123,
            ProcessInJob = 0x00000124,
            ProcessCloned = 0x00000129,
            FileLockedWithOnlyReaders = 0x0000012a,
            FileLockedWithWriters = 0x0000012b,

            // Informational
            Informational = 0x40000000,
            ObjectNameExists = 0x40000000,
            ThreadWasSuspended = 0x40000001,
            WorkingSetLimitRange = 0x40000002,
            ImageNotAtBase = 0x40000003,
            RegistryRecovered = 0x40000009,

            // Warning
            Warning = 0x80000000,
            GuardPageViolation = 0x80000001,
            DatatypeMisalignment = 0x80000002,
            Breakpoint = 0x80000003,
            SingleStep = 0x80000004,
            BufferOverflow = 0x80000005,
            NoMoreFiles = 0x80000006,
            HandlesClosed = 0x8000000a,
            PartialCopy = 0x8000000d,
            DeviceBusy = 0x80000011,
            InvalidEaName = 0x80000013,
            EaListInconsistent = 0x80000014,
            NoMoreEntries = 0x8000001a,
            LongJump = 0x80000026,
            DllMightBeInsecure = 0x8000002b,

            // Error
            Error = 0xc0000000,
            Unsuccessful = 0xc0000001,
            NotImplemented = 0xc0000002,
            InvalidInfoClass = 0xc0000003,
            InfoLengthMismatch = 0xc0000004,
            AccessViolation = 0xc0000005,
            InPageError = 0xc0000006,
            PagefileQuota = 0xc0000007,
            InvalidHandle = 0xc0000008,
            BadInitialStack = 0xc0000009,
            BadInitialPc = 0xc000000a,
            InvalidCid = 0xc000000b,
            TimerNotCanceled = 0xc000000c,
            InvalidParameter = 0xc000000d,
            NoSuchDevice = 0xc000000e,
            NoSuchFile = 0xc000000f,
            InvalidDeviceRequest = 0xc0000010,
            EndOfFile = 0xc0000011,
            WrongVolume = 0xc0000012,
            NoMediaInDevice = 0xc0000013,
            NoMemory = 0xc0000017,
            NotMappedView = 0xc0000019,
            UnableToFreeVm = 0xc000001a,
            UnableToDeleteSection = 0xc000001b,
            IllegalInstruction = 0xc000001d,
            AlreadyCommitted = 0xc0000021,
            AccessDenied = 0xc0000022,
            BufferTooSmall = 0xc0000023,
            ObjectTypeMismatch = 0xc0000024,
            NonContinuableException = 0xc0000025,
            BadStack = 0xc0000028,
            NotLocked = 0xc000002a,
            NotCommitted = 0xc000002d,
            InvalidParameterMix = 0xc0000030,
            ObjectNameInvalid = 0xc0000033,
            ObjectNameNotFound = 0xc0000034,
            ObjectNameCollision = 0xc0000035,
            ObjectPathInvalid = 0xc0000039,
            ObjectPathNotFound = 0xc000003a,
            ObjectPathSyntaxBad = 0xc000003b,
            DataOverrun = 0xc000003c,
            DataLate = 0xc000003d,
            DataError = 0xc000003e,
            CrcError = 0xc000003f,
            SectionTooBig = 0xc0000040,
            PortConnectionRefused = 0xc0000041,
            InvalidPortHandle = 0xc0000042,
            SharingViolation = 0xc0000043,
            QuotaExceeded = 0xc0000044,
            InvalidPageProtection = 0xc0000045,
            MutantNotOwned = 0xc0000046,
            SemaphoreLimitExceeded = 0xc0000047,
            PortAlreadySet = 0xc0000048,
            SectionNotImage = 0xc0000049,
            SuspendCountExceeded = 0xc000004a,
            ThreadIsTerminating = 0xc000004b,
            BadWorkingSetLimit = 0xc000004c,
            IncompatibleFileMap = 0xc000004d,
            SectionProtection = 0xc000004e,
            EasNotSupported = 0xc000004f,
            EaTooLarge = 0xc0000050,
            NonExistentEaEntry = 0xc0000051,
            NoEasOnFile = 0xc0000052,
            EaCorruptError = 0xc0000053,
            FileLockConflict = 0xc0000054,
            LockNotGranted = 0xc0000055,
            DeletePending = 0xc0000056,
            CtlFileNotSupported = 0xc0000057,
            UnknownRevision = 0xc0000058,
            RevisionMismatch = 0xc0000059,
            InvalidOwner = 0xc000005a,
            InvalidPrimaryGroup = 0xc000005b,
            NoImpersonationToken = 0xc000005c,
            CantDisableMandatory = 0xc000005d,
            NoLogonServers = 0xc000005e,
            NoSuchLogonSession = 0xc000005f,
            NoSuchPrivilege = 0xc0000060,
            PrivilegeNotHeld = 0xc0000061,
            InvalidAccountName = 0xc0000062,
            UserExists = 0xc0000063,
            NoSuchUser = 0xc0000064,
            GroupExists = 0xc0000065,
            NoSuchGroup = 0xc0000066,
            MemberInGroup = 0xc0000067,
            MemberNotInGroup = 0xc0000068,
            LastAdmin = 0xc0000069,
            WrongPassword = 0xc000006a,
            IllFormedPassword = 0xc000006b,
            PasswordRestriction = 0xc000006c,
            LogonFailure = 0xc000006d,
            AccountRestriction = 0xc000006e,
            InvalidLogonHours = 0xc000006f,
            InvalidWorkstation = 0xc0000070,
            PasswordExpired = 0xc0000071,
            AccountDisabled = 0xc0000072,
            NoneMapped = 0xc0000073,
            TooManyLuidsRequested = 0xc0000074,
            LuidsExhausted = 0xc0000075,
            InvalidSubAuthority = 0xc0000076,
            InvalidAcl = 0xc0000077,
            InvalidSid = 0xc0000078,
            InvalidSecurityDescr = 0xc0000079,
            ProcedureNotFound = 0xc000007a,
            InvalidImageFormat = 0xc000007b,
            NoToken = 0xc000007c,
            BadInheritanceAcl = 0xc000007d,
            RangeNotLocked = 0xc000007e,
            DiskFull = 0xc000007f,
            ServerDisabled = 0xc0000080,
            ServerNotDisabled = 0xc0000081,
            TooManyGuidsRequested = 0xc0000082,
            GuidsExhausted = 0xc0000083,
            InvalidIdAuthority = 0xc0000084,
            AgentsExhausted = 0xc0000085,
            InvalidVolumeLabel = 0xc0000086,
            SectionNotExtended = 0xc0000087,
            NotMappedData = 0xc0000088,
            ResourceDataNotFound = 0xc0000089,
            ResourceTypeNotFound = 0xc000008a,
            ResourceNameNotFound = 0xc000008b,
            ArrayBoundsExceeded = 0xc000008c,
            FloatDenormalOperand = 0xc000008d,
            FloatDivideByZero = 0xc000008e,
            FloatInexactResult = 0xc000008f,
            FloatInvalidOperation = 0xc0000090,
            FloatOverflow = 0xc0000091,
            FloatStackCheck = 0xc0000092,
            FloatUnderflow = 0xc0000093,
            IntegerDivideByZero = 0xc0000094,
            IntegerOverflow = 0xc0000095,
            PrivilegedInstruction = 0xc0000096,
            TooManyPagingFiles = 0xc0000097,
            FileInvalid = 0xc0000098,
            InstanceNotAvailable = 0xc00000ab,
            PipeNotAvailable = 0xc00000ac,
            InvalidPipeState = 0xc00000ad,
            PipeBusy = 0xc00000ae,
            IllegalFunction = 0xc00000af,
            PipeDisconnected = 0xc00000b0,
            PipeClosing = 0xc00000b1,
            PipeConnected = 0xc00000b2,
            PipeListening = 0xc00000b3,
            InvalidReadMode = 0xc00000b4,
            IoTimeout = 0xc00000b5,
            FileForcedClosed = 0xc00000b6,
            ProfilingNotStarted = 0xc00000b7,
            ProfilingNotStopped = 0xc00000b8,
            NotSameDevice = 0xc00000d4,
            FileRenamed = 0xc00000d5,
            CantWait = 0xc00000d8,
            PipeEmpty = 0xc00000d9,
            CantTerminateSelf = 0xc00000db,
            InternalError = 0xc00000e5,
            InvalidParameter1 = 0xc00000ef,
            InvalidParameter2 = 0xc00000f0,
            InvalidParameter3 = 0xc00000f1,
            InvalidParameter4 = 0xc00000f2,
            InvalidParameter5 = 0xc00000f3,
            InvalidParameter6 = 0xc00000f4,
            InvalidParameter7 = 0xc00000f5,
            InvalidParameter8 = 0xc00000f6,
            InvalidParameter9 = 0xc00000f7,
            InvalidParameter10 = 0xc00000f8,
            InvalidParameter11 = 0xc00000f9,
            InvalidParameter12 = 0xc00000fa,
            MappedFileSizeZero = 0xc000011e,
            TooManyOpenedFiles = 0xc000011f,
            Cancelled = 0xc0000120,
            CannotDelete = 0xc0000121,
            InvalidComputerName = 0xc0000122,
            FileDeleted = 0xc0000123,
            SpecialAccount = 0xc0000124,
            SpecialGroup = 0xc0000125,
            SpecialUser = 0xc0000126,
            MembersPrimaryGroup = 0xc0000127,
            FileClosed = 0xc0000128,
            TooManyThreads = 0xc0000129,
            ThreadNotInProcess = 0xc000012a,
            TokenAlreadyInUse = 0xc000012b,
            PagefileQuotaExceeded = 0xc000012c,
            CommitmentLimit = 0xc000012d,
            InvalidImageLeFormat = 0xc000012e,
            InvalidImageNotMz = 0xc000012f,
            InvalidImageProtect = 0xc0000130,
            InvalidImageWin16 = 0xc0000131,
            LogonServer = 0xc0000132,
            DifferenceAtDc = 0xc0000133,
            SynchronizationRequired = 0xc0000134,
            DllNotFound = 0xc0000135,
            IoPrivilegeFailed = 0xc0000137,
            OrdinalNotFound = 0xc0000138,
            EntryPointNotFound = 0xc0000139,
            ControlCExit = 0xc000013a,
            PortNotSet = 0xc0000353,
            DebuggerInactive = 0xc0000354,
            CallbackBypass = 0xc0000503,
            PortClosed = 0xc0000700,
            MessageLost = 0xc0000701,
            InvalidMessage = 0xc0000702,
            RequestCanceled = 0xc0000703,
            RecursiveDispatch = 0xc0000704,
            LpcReceiveBufferExpected = 0xc0000705,
            LpcInvalidConnectionUsage = 0xc0000706,
            LpcRequestsNotAllowed = 0xc0000707,
            ResourceInUse = 0xc0000708,
            ProcessIsProtected = 0xc0000712,
            VolumeDirty = 0xc0000806,
            FileCheckedOut = 0xc0000901,
            CheckOutRequired = 0xc0000902,
            BadFileType = 0xc0000903,
            FileTooLarge = 0xc0000904,
            FormsAuthRequired = 0xc0000905,
            VirusInfected = 0xc0000906,
            VirusDeleted = 0xc0000907,
            TransactionalConflict = 0xc0190001,
            InvalidTransaction = 0xc0190002,
            TransactionNotActive = 0xc0190003,
            TmInitializationFailed = 0xc0190004,
            RmNotActive = 0xc0190005,
            RmMetadataCorrupt = 0xc0190006,
            TransactionNotJoined = 0xc0190007,
            DirectoryNotRm = 0xc0190008,
            CouldNotResizeLog = 0xc0190009,
            TransactionsUnsupportedRemote = 0xc019000a,
            LogResizeInvalidSize = 0xc019000b,
            RemoteFileVersionMismatch = 0xc019000c,
            CrmProtocolAlreadyExists = 0xc019000f,
            TransactionPropagationFailed = 0xc0190010,
            CrmProtocolNotFound = 0xc0190011,
            TransactionSuperiorExists = 0xc0190012,
            TransactionRequestNotValid = 0xc0190013,
            TransactionNotRequested = 0xc0190014,
            TransactionAlreadyAborted = 0xc0190015,
            TransactionAlreadyCommitted = 0xc0190016,
            TransactionInvalidMarshallBuffer = 0xc0190017,
            CurrentTransactionNotValid = 0xc0190018,
            LogGrowthFailed = 0xc0190019,
            ObjectNoLongerExists = 0xc0190021,
            StreamMiniversionNotFound = 0xc0190022,
            StreamMiniversionNotValid = 0xc0190023,
            MiniversionInaccessibleFromSpecifiedTransaction = 0xc0190024,
            CantOpenMiniversionWithModifyIntent = 0xc0190025,
            CantCreateMoreStreamMiniversions = 0xc0190026,
            HandleNoLongerValid = 0xc0190028,
            NoTxfMetadata = 0xc0190029,
            LogCorruptionDetected = 0xc0190030,
            CantRecoverWithHandleOpen = 0xc0190031,
            RmDisconnected = 0xc0190032,
            EnlistmentNotSuperior = 0xc0190033,
            RecoveryNotNeeded = 0xc0190034,
            RmAlreadyStarted = 0xc0190035,
            FileIdentityNotPersistent = 0xc0190036,
            CantBreakTransactionalDependency = 0xc0190037,
            CantCrossRmBoundary = 0xc0190038,
            TxfDirNotEmpty = 0xc0190039,
            IndoubtTransactionsExist = 0xc019003a,
            TmVolatile = 0xc019003b,
            RollbackTimerExpired = 0xc019003c,
            TxfAttributeCorrupt = 0xc019003d,
            EfsNotAllowedInTransaction = 0xc019003e,
            TransactionalOpenNotAllowed = 0xc019003f,
            TransactedMappingUnsupportedRemote = 0xc0190040,
            TxfMetadataAlreadyPresent = 0xc0190041,
            TransactionScopeCallbacksNotSet = 0xc0190042,
            TransactionRequiredPromotion = 0xc0190043,
            CannotExecuteFileInTransaction = 0xc0190044,
            TransactionsNotFrozen = 0xc0190045,

            MaximumNtStatus = 0xffffffff
        }



        internal enum MINIDUMP_TYPE
		{
			MiniDumpNormal = 0,
			MiniDumpWithDataSegs = 1,
			MiniDumpWithFullMemory = 2,
			MiniDumpWithHandleData = 4,
			MiniDumpFilterMemory = 8,
			MiniDumpScanMemory = 0x10,
			MiniDumpWithUnloadedModules = 0x20,
			MiniDumpWithIndirectlyReferencedMemory = 0x40,
			MiniDumpFilterModulePaths = 0x80,
			MiniDumpWithProcessThreadData = 0x100,
			MiniDumpWithPrivateReadWriteMemory = 0x200,
			MiniDumpWithoutOptionalData = 0x400,
			MiniDumpWithFullMemoryInfo = 0x800,
			MiniDumpWithThreadInfo = 0x1000,
			MiniDumpWithCodeSegs = 0x2000
		}

		[Flags]
		public enum MemoryProtection : uint
		{
			Execute = 0x10u,
			ExecuteRead = 0x20u,
			ExecuteReadWrite = 0x40u,
			ExecuteWriteCopy = 0x80u,
			NoAccess = 1u,
			ReadOnly = 2u,
			ReadWrite = 4u,
			WriteCopy = 8u,
			GuardModifierflag = 0x100u,
			NoCacheModifierflag = 0x200u,
			WriteCombineModifierflag = 0x400u
		}

		[Flags]
		public enum ThreadAccess
		{
			TERMINATE = 1,
			SUSPEND_RESUME = 2,
			GET_CONTEXT = 8,
			SET_CONTEXT = 0x10,
			SET_INFORMATION = 0x20,
			QUERY_INFORMATION = 0x40,
			SET_THREAD_TOKEN = 0x80,
			IMPERSONATE = 0x100,
			DIRECT_IMPERSONATION = 0x200
		}

		public struct SYSTEM_INFO
		{
			public ushort processorArchitecture;

			private ushort reserved;

			public uint pageSize;

			public UIntPtr minimumApplicationAddress;

			public UIntPtr maximumApplicationAddress;

			public IntPtr activeProcessorMask;

			public uint numberOfProcessors;

			public uint processorType;

			public uint allocationGranularity;

			public ushort processorLevel;

			public ushort processorRevision;
		}

		public struct MEMORY_BASIC_INFORMATION32
		{
			public UIntPtr BaseAddress;

			public UIntPtr AllocationBase;

			public uint AllocationProtect;

			public uint RegionSize;

			public uint State;

			public uint Protect;

			public uint Type;
		}

		public struct MEMORY_BASIC_INFORMATION64
		{
			public UIntPtr BaseAddress;

			public UIntPtr AllocationBase;

			public uint AllocationProtect;

			public uint __alignment1;

			public ulong RegionSize;

			public uint State;

			public uint Protect;

			public uint Type;

			public uint __alignment2;
		}
		public struct ProcessEntry32
		{
			public uint dwSize;

			public uint cntUsage;

			public uint th32ProcessID;

			public IntPtr th32DefaultHeapID;

			public uint th32ModuleID;

			public uint cntThreads;

			public uint th32ParentProcessID;

			public int pcPriClassBase;

			public uint dwFlags;

			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
			public string szExeFile;
		}
		public struct MEMORY_BASIC_INFORMATION
		{
			public UIntPtr BaseAddress;

			public UIntPtr AllocationBase;

			public uint AllocationProtect;

			public long RegionSize;

			public uint State;

			public uint Protect;

			public uint Type;
		}

		private const int PROCESS_CREATE_THREAD = 2;

		private const int PROCESS_QUERY_INFORMATION = 1024;

		private const int PROCESS_VM_OPERATION = 8;

		private const int PROCESS_VM_WRITE = 32;

		private const int PROCESS_VM_READ = 16;

		private const uint MEM_FREE = 65536u;

		private const uint MEM_COMMIT = 4096u;

		private const uint MEM_RESERVE = 8192u;

		private const uint PAGE_READONLY = 2u;

		private const uint PAGE_READWRITE = 4u;

		private const uint PAGE_WRITECOPY = 8u;

		private const uint PAGE_EXECUTE_READWRITE = 64u;

		private const uint PAGE_EXECUTE_WRITECOPY = 128u;

		private const uint PAGE_EXECUTE = 16u;

		private const uint PAGE_EXECUTE_READ = 32u;

		private const uint PAGE_GUARD = 256u;

		private const uint PAGE_NOACCESS = 1u;

		private uint MEM_PRIVATE = 131072u;

		private uint MEM_IMAGE = 16777216u;

		public IntPtr pHandle;

		private Dictionary<string, CancellationTokenSource> FreezeTokenSrcs = new Dictionary<string, CancellationTokenSource>();

		public Process theProc = null;

		private bool _is64Bit;

		public Dictionary<string, IntPtr> modules = new Dictionary<string, IntPtr>();

		private ProcessModule mainModule;

		public bool Is64Bit
		{
			get
			{
				return _is64Bit;
			}
			private set
			{
				_is64Bit = value;
			}
		}

        [Flags]
        public enum ProcessAccessFlags : int
        {
            All = 0x001F0FFF,
            Terminate = 0x00000001,
            CreateThread = 0x00000002,
            VirtualMemoryOperation = 0x00000008,
            VirtualMemoryRead = 0x00000010,
            VirtualMemoryWrite = 0x00000020,
            DuplicateHandle = 0x00000040,
            CreateProcess = 0x000000080,
            SetQuota = 0x00000100,
            SetInformation = 0x00000200,
            QueryInformation = 0x00000400,
            QueryLimitedInformation = 0x00001000,
            Synchronize = 0x00100000
        }
        [DllImport("KERNEL32.DLL")]
		public static extern IntPtr CreateToolhelp32Snapshot(uint flags, uint processid);
		//[DllImport("kernel32.dll")]
		//public static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(
                uint processAccess,
                bool bInheritHandle,
                int processId
);


        [DllImport("kernel32.dll", EntryPoint = "VirtualQueryEx")]
		public static extern UIntPtr Native_VirtualQueryEx(IntPtr hProcess, UIntPtr lpAddress, out MEMORY_BASIC_INFORMATION32 lpBuffer, UIntPtr dwLength);

		[DllImport("kernel32.dll", EntryPoint = "VirtualQueryEx")]
		public static extern UIntPtr Native_VirtualQueryEx(IntPtr hProcess, UIntPtr lpAddress, out MEMORY_BASIC_INFORMATION64 lpBuffer, UIntPtr dwLength);

		[DllImport("kernel32.dll")]
		private static extern uint GetLastError();

		public UIntPtr VirtualQueryEx(IntPtr hProcess, UIntPtr lpAddress, out MEMORY_BASIC_INFORMATION lpBuffer)
		{
			UIntPtr result;
			if (Is64Bit || IntPtr.Size == 8)
			{
				MEMORY_BASIC_INFORMATION64 lpBuffer2 = default(MEMORY_BASIC_INFORMATION64);
				result = Native_VirtualQueryEx(hProcess, lpAddress, out lpBuffer2, new UIntPtr((uint)Marshal.SizeOf((object)lpBuffer2)));
				lpBuffer.BaseAddress = lpBuffer2.BaseAddress;
				lpBuffer.AllocationBase = lpBuffer2.AllocationBase;
				lpBuffer.AllocationProtect = lpBuffer2.AllocationProtect;
				lpBuffer.RegionSize = (long)lpBuffer2.RegionSize;
				lpBuffer.State = lpBuffer2.State;
				lpBuffer.Protect = lpBuffer2.Protect;
				lpBuffer.Type = lpBuffer2.Type;
				return result;
			}
			MEMORY_BASIC_INFORMATION32 lpBuffer3 = default(MEMORY_BASIC_INFORMATION32);
			result = Native_VirtualQueryEx(hProcess, lpAddress, out lpBuffer3, new UIntPtr((uint)Marshal.SizeOf((object)lpBuffer3)));
			lpBuffer.BaseAddress = lpBuffer3.BaseAddress;
			lpBuffer.AllocationBase = lpBuffer3.AllocationBase;
			lpBuffer.AllocationProtect = lpBuffer3.AllocationProtect;
			lpBuffer.RegionSize = lpBuffer3.RegionSize;
			lpBuffer.State = lpBuffer3.State;
			lpBuffer.Protect = lpBuffer3.Protect;
			lpBuffer.Type = lpBuffer3.Type;
			return result;
		}

		[DllImport("kernel32.dll")]
		private static extern void GetSystemInfo(out SYSTEM_INFO lpSystemInfo);

		[DllImport("kernel32.dll")]
		private static extern IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle, uint dwThreadId);

		[DllImport("kernel32.dll")]
		private static extern uint SuspendThread(IntPtr hThread);

		[DllImport("kernel32.dll")]
		private static extern int ResumeThread(IntPtr hThread);

		[DllImport("dbghelp.dll")]
		private static extern bool MiniDumpWriteDump(IntPtr hProcess, int ProcessId, IntPtr hFile, MINIDUMP_TYPE DumpType, IntPtr ExceptionParam, IntPtr UserStreamParam, IntPtr CallackParam);

		[DllImport("user32.dll", SetLastError = true)]
		private static extern int GetWindowLong(IntPtr hWnd, int nIndex);

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, IntPtr w, IntPtr l);

		[DllImport("kernel32.dll")]
		private static extern bool WriteProcessMemory(IntPtr hProcess, UIntPtr lpBaseAddress, string lpBuffer, UIntPtr nSize, out IntPtr lpNumberOfBytesWritten);

		[DllImport("kernel32.dll")]
		private static extern int GetProcessId(IntPtr handle);

		[DllImport("kernel32.dll", CharSet = CharSet.Unicode)]
		private static extern uint GetPrivateProfileString(string lpAppName, string lpKeyName, string lpDefault, StringBuilder lpReturnedString, uint nSize, string lpFileName);

		[DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
		private static extern bool VirtualFreeEx(IntPtr hProcess, UIntPtr lpAddress, UIntPtr dwSize, uint dwFreeType);

		[DllImport("kernel32.dll")]
		private static extern bool ReadProcessMemory(IntPtr hProcess, UIntPtr lpBaseAddress, [Out] byte[] lpBuffer, UIntPtr nSize, IntPtr lpNumberOfBytesRead);

		[DllImport("kernel32.dll")]
		private static extern bool ReadProcessMemory(IntPtr hProcess, UIntPtr lpBaseAddress, [Out] byte[] lpBuffer, UIntPtr nSize, out ulong lpNumberOfBytesRead);

		[DllImport("kernel32.dll")]
		private static extern bool ReadProcessMemory(IntPtr hProcess, UIntPtr lpBaseAddress, [Out] IntPtr lpBuffer, UIntPtr nSize, out ulong lpNumberOfBytesRead);

		[DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
		private static extern UIntPtr VirtualAllocEx(IntPtr hProcess, UIntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

		[DllImport("kernel32.dll")]
		private static extern bool VirtualProtectEx(IntPtr hProcess, UIntPtr lpAddress, IntPtr dwSize, MemoryProtection flNewProtect, out MemoryProtection lpflOldProtect);

		[DllImport("kernel32.dll", CharSet = CharSet.Ansi, ExactSpelling = true)]
		public static extern UIntPtr GetProcAddress(IntPtr hModule, string procName);

		[DllImport("kernel32.dll", EntryPoint = "CloseHandle")]
		private static extern bool _CloseHandle(IntPtr hObject);

		[DllImport("kernel32.dll")]
		public static extern int CloseHandle(IntPtr hObject);

		[DllImport("kernel32.dll", CharSet = CharSet.Auto)]
		public static extern IntPtr GetModuleHandle(string lpModuleName);

		[DllImport("kernel32", ExactSpelling = true, SetLastError = true)]
		internal static extern int WaitForSingleObject(IntPtr handle, int milliseconds);

		[DllImport("kernel32.dll")]
		private static extern bool WriteProcessMemory(IntPtr hProcess, UIntPtr lpBaseAddress, byte[] lpBuffer, UIntPtr nSize, IntPtr lpNumberOfBytesWritten);

		[DllImport("kernel32.dll")]
		private static extern bool WriteProcessMemory(IntPtr hProcess, UIntPtr lpBaseAddress, byte[] lpBuffer, UIntPtr nSize, out IntPtr lpNumberOfBytesWritten);

		[DllImport("kernel32")]
		public static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, UIntPtr lpStartAddress, UIntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

		[DllImport("kernel32")]
		public static extern bool IsWow64Process(IntPtr hProcess, out bool lpSystemInfo);

		[DllImport("user32.dll")]
		private static extern bool SetForegroundWindow(IntPtr hWnd);

		[DllImport("KERNEL32.DLL")]
		public static extern int Process32First(IntPtr handle, ref ProcessEntry32 pe);

		[DllImport("KERNEL32.DLL")]
		public static extern int Process32Next(IntPtr handle, ref ProcessEntry32 pe);


        public struct OBJECT_ATTRIBUTES
        {
            Int32 Length;
            IntPtr RootDirectory;
            IntPtr ObjectName;
            uint Attributes;
            IntPtr SecurityDescriptor;
            IntPtr SecurityQualityOfService;
        }


        public struct CLIENT_ID
        {
            IntPtr UniqueProcess;
            IntPtr UniqueThread;
        }


        [DllImport("ntdll.dll", SetLastError = true)]
        static extern NtStatus NtReadVirtualMemory(IntPtr ProcessHandle, IntPtr BaseAddress, byte[] Buffer, UInt32 NumberOfBytesToRead, ref UInt32 NumberOfBytesRead);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern NtStatus NtOpenProcess(ref IntPtr ProcessHandle, UInt32 AccessMask, ref OBJECT_ATTRIBUTES ObjectAttributes, ref CLIENT_ID ClientId);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern NtStatus NtWriteVirtualMemory(IntPtr ProcessHandle, IntPtr BaseAddress, byte[] Buffer, UInt32 NumberOfBytesToWrite, ref UInt32 NumberOfBytesWritten);


        private bool IsDigitsOnly(string str)
		{
			foreach (char c in str)
			{
				if (c < '0' || c > '9')
				{
					return false;
				}
			}
			return true;
		}

		public void FreezeValue(string address, string type, string value, string file = "")
		{
			CancellationTokenSource cts = new CancellationTokenSource();
			if (FreezeTokenSrcs.ContainsKey(address))
			{
				Debug.WriteLine("Changing Freezing Address " + address + " Value " + value);
				try
				{
					FreezeTokenSrcs[address].Cancel();
					FreezeTokenSrcs.Remove(address);
				}
				catch
				{
					Debug.WriteLine("ERROR: Avoided a crash. Address " + address + " was not frozen.");
				}
			}
			else
			{
				Debug.WriteLine("Adding Freezing Address " + address + " Value " + value);
			}
			FreezeTokenSrcs.Add(address, cts);
			Task.Factory.StartNew(delegate
			{
				while (!cts.Token.IsCancellationRequested)
				{
					WriteMemory(address, type, value, file);
					Thread.Sleep(25);
				}
			}, cts.Token);
		}

		public void UnfreezeValue(string address)
		{
			Debug.WriteLine("Un-Freezing Address " + address);
			try
			{
				FreezeTokenSrcs[address].Cancel();
				FreezeTokenSrcs.Remove(address);
			}
			catch
			{
				Debug.WriteLine("ERROR: Address " + address + " was not frozen.");
			}
		}

		public bool OpenProcess(int pid)
		{

			if (pid <= 0)
			{
				return false;
			}
			if (theProc != null && theProc.Id == pid)
			{
				return true;
			}
			try
			{
				theProc = Process.GetProcessById(pid);
				if (theProc != null && !theProc.Responding)
				{
					return false;
				}
                CloseHandle(pHandle);
                pHandle = IntPtr.Zero;
                pHandle = OpenProcess(0x001F0FFF, false, pid);
                //pHandle = Process.GetProcessById(pid).Handle;

				//mainModule = theProc.MainModule;
				//GetModules();
				return true;
			}
			catch
			{
				return false;
			}
		}

		public bool OpenProcess(string proc)
		{
			return OpenProcess(GetProcIdFromName(proc));
		}

		public bool IsAdmin()
		{
			return true;
		}
		
		public void GetModules()
		{
			if (theProc == null)
			{
				return;
			}
			modules.Clear();
			foreach (ProcessModule module in theProc.Modules)
			{
				if (!string.IsNullOrEmpty(module.ModuleName) && !modules.ContainsKey(module.ModuleName))
				{
					modules.Add(module.ModuleName, module.BaseAddress);
				}
			}
		}

		public void SetFocus()
		{
			SetForegroundWindow(theProc.MainWindowHandle);
		}

		public int GetProcIdFromName(string name)
		{
			Process[] processes = Process.GetProcesses();
			if (name.ToLower().Contains(".exe"))
			{
				name = name.Replace(".exe", "");
			}
			if (name.ToLower().Contains(".bin"))
			{
				name = name.Replace(".bin", "");
			}
			Process[] array = processes;
			foreach (Process process in array)
			{
				if (process.ProcessName.Equals(name, StringComparison.CurrentCultureIgnoreCase))
				{
					return process.Id;
				}
			}
			return 0;
		}

		public string LoadCode(string name, string file)
		{
			StringBuilder stringBuilder = new StringBuilder(1024);
			if (file != "")
			{
				uint privateProfileString = GetPrivateProfileString("codes", name, "", stringBuilder, (uint)stringBuilder.Capacity, file);
			}
			else
			{
				stringBuilder.Append(name);
			}
			return stringBuilder.ToString();
		}

		private int LoadIntCode(string name, string path)
		{
			try
			{
				int num = Convert.ToInt32(LoadCode(name, path), 16);
				if (num >= 0)
				{
					return num;
				}
				return 0;
			}
			catch
			{
				Debug.WriteLine("ERROR: LoadIntCode function crashed!");
				return 0;
			}
		}

		//public void ThreadStartClient(string func, string name)
		//{
		//	using NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(name);
		//	if (!namedPipeClientStream.IsConnected)
		//	{
		//		namedPipeClientStream.Connect();
		//	}
		//	using StreamWriter streamWriter = new StreamWriter(namedPipeClientStream);
		//	if (!streamWriter.AutoFlush)
		//	{
		//		streamWriter.AutoFlush = true;
		//	}
		//	streamWriter.WriteLine(func);
		//}

		public string CutString(string str)
		{
			StringBuilder stringBuilder = new StringBuilder();
			foreach (char c in str)
			{
				if (c >= ' ' && c <= '~')
				{
					stringBuilder.Append(c);
					continue;
				}
				break;
			}
			return stringBuilder.ToString();
		}

		public string SanitizeString(string str)
		{
			StringBuilder stringBuilder = new StringBuilder();
			foreach (char c in str)
			{
				if (c >= ' ' && c <= '~')
				{
					stringBuilder.Append(c);
				}
			}
			return stringBuilder.ToString();
		}

		public bool ChangeProtection(string code, MemoryProtection newProtection, out MemoryProtection oldProtection, string file = "")
		{
			UIntPtr code2 = GetCode(code, file);
			if (code2 == UIntPtr.Zero || pHandle == IntPtr.Zero)
			{
				oldProtection = (MemoryProtection)0u;
				return false;
			}
			return VirtualProtectEx(pHandle, code2, (IntPtr)(Is64Bit ? 8 : 4), newProtection, out oldProtection);
		}

		private byte[] ReadBytes(string code, long length)
		{
			byte[] array = new byte[length];
            int address = int.Parse(code, NumberStyles.HexNumber);
            UIntPtr code2 = (UIntPtr)address;
            //for (int i = address; i < address + length; i++)
            //{
            //    byte[] arrays = ReadByte(i);
            //}
            if (!ReadProcessMemory(pHandle, code2, array, (UIntPtr)(ulong)length, IntPtr.Zero))
			{
				return null;
			}
			return array;

		}
        public byte[] ReadByte(int code, string file = "")
        {
            byte[] array = new byte[1];
            //UIntPtr code2 = GetCode(code, file);
            //int address = int.Parse(code, NumberStyles.HexNumber);
            UIntPtr code2 = (UIntPtr)code;
            if (ReadProcessMemory(pHandle, code2, array, (UIntPtr)1uL, IntPtr.Zero))
            {
                return array;
            }
            return null;
        }
        public float ReadFloat(string code, string file = "", bool round = true)
		{
			byte[] array = new byte[4];
			UIntPtr code2 = GetCode(code, file);
			try
			{
				if (ReadProcessMemory(pHandle, code2, array, (UIntPtr)4uL, IntPtr.Zero))
				{
					float num = BitConverter.ToSingle(array, 0);
					float result = num;
					if (round)
					{
						result = (float)Math.Round(num, 2);
					}
					return result;
				}
				return 0f;
			}
			catch
			{
				return 0f;
			}
		}

		public string ReadString(string code, string file = "", int length = 32, bool zeroTerminated = true)
		{
			byte[] array = new byte[length];
			UIntPtr code2 = GetCode(code, file);
			if (ReadProcessMemory(pHandle, code2, array, (UIntPtr)(ulong)length, IntPtr.Zero))
			{
				return zeroTerminated ? Encoding.UTF8.GetString(array).Split(default(char))[0] : Encoding.UTF8.GetString(array);
			}
			return "";
		}

		public double ReadDouble(string code, string file = "", bool round = true)
		{
			byte[] array = new byte[8];
			UIntPtr code2 = GetCode(code, file);
			try
			{
				if (ReadProcessMemory(pHandle, code2, array, (UIntPtr)8uL, IntPtr.Zero))
				{
					double num = BitConverter.ToDouble(array, 0);
					double result = num;
					if (round)
					{
						result = Math.Round(num, 2);
					}
					return result;
				}
				return 0.0;
			}
			catch
			{
				return 0.0;
			}
		}

		public int ReadUIntPtr(UIntPtr code)
		{
			byte[] array = new byte[4];
			if (ReadProcessMemory(pHandle, code, array, (UIntPtr)4uL, IntPtr.Zero))
			{
				return BitConverter.ToInt32(array, 0);
			}
			return 0;
		}

        public int ReadInt(string code, string file = "")
        {
            byte[] array = new byte[4];
            UIntPtr code2 = GetCode(code, file);
           
            if (ReadProcessMemory(pHandle, code2, array, (UIntPtr)4uL, IntPtr.Zero))
            {
                return BitConverter.ToInt32(array, 0);
            }
            return 0;
        }

        public long ReadLong(string code, string file = "")
		{
			byte[] array = new byte[16];
			UIntPtr code2 = GetCode(code, file);
			if (ReadProcessMemory(pHandle, code2, array, (UIntPtr)16uL, IntPtr.Zero))
			{
				return BitConverter.ToInt64(array, 0);
			}
			return 0L;
		}

		public ulong ReadUInt(string code, string file = "")
		{
			byte[] array = new byte[4];
			UIntPtr code2 = GetCode(code, file);
			if (ReadProcessMemory(pHandle, code2, array, (UIntPtr)4uL, IntPtr.Zero))
			{
				return BitConverter.ToUInt64(array, 0);
			}
			return 0uL;
		}

		public int Read2ByteMove(string code, int moveQty, string file = "")
		{
			byte[] array = new byte[4];
			UIntPtr code2 = GetCode(code, file);
			UIntPtr lpBaseAddress = UIntPtr.Add(code2, moveQty);
			if (ReadProcessMemory(pHandle, lpBaseAddress, array, (UIntPtr)2uL, IntPtr.Zero))
			{
				return BitConverter.ToInt32(array, 0);
			}
			return 0;
		}

		public int ReadIntMove(string code, int moveQty, string file = "")
		{
			byte[] array = new byte[4];
			UIntPtr code2 = GetCode(code, file);
			UIntPtr lpBaseAddress = UIntPtr.Add(code2, moveQty);
			if (ReadProcessMemory(pHandle, lpBaseAddress, array, (UIntPtr)4uL, IntPtr.Zero))
			{
				return BitConverter.ToInt32(array, 0);
			}
			return 0;
		}

		public ulong ReadUIntMove(string code, int moveQty, string file = "")
		{
			byte[] array = new byte[8];
			UIntPtr code2 = GetCode(code, file);
			UIntPtr lpBaseAddress = UIntPtr.Add(code2, moveQty);
			if (ReadProcessMemory(pHandle, lpBaseAddress, array, (UIntPtr)8uL, IntPtr.Zero))
			{
				return BitConverter.ToUInt64(array, 0);
			}
			return 0uL;
		}

		public int Read2Byte(string code, string file = "")
		{
			byte[] array = new byte[4];
			UIntPtr code2 = GetCode(code, file);
			if (ReadProcessMemory(pHandle, code2, array, (UIntPtr)2uL, IntPtr.Zero))
			{
				return BitConverter.ToInt32(array, 0);
			}
			return 0;
		}



		public bool[] ReadBits(string code, string file = "")
		{
			byte[] array = new byte[1];
			UIntPtr code2 = GetCode(code, file);
			bool[] array2 = new bool[8];
			if (!ReadProcessMemory(pHandle, code2, array, (UIntPtr)1uL, IntPtr.Zero))
			{
				return array2;
			}
			if (!BitConverter.IsLittleEndian)
			{
				throw new Exception("Should be little endian");
			}
			for (int i = 0; i < 8; i++)
			{
				array2[i] = Convert.ToBoolean(array[0] & (1 << i));
			}
			return array2;
		}

		public int ReadPByte(UIntPtr address, string code, string file = "")
		{
			byte[] array = new byte[4];
			if (ReadProcessMemory(pHandle, address + LoadIntCode(code, file), array, (UIntPtr)1uL, IntPtr.Zero))
			{
				return BitConverter.ToInt32(array, 0);
			}
			return 0;
		}

		public float ReadPFloat(UIntPtr address, string code, string file = "")
		{
			byte[] array = new byte[4];
			if (ReadProcessMemory(pHandle, address + LoadIntCode(code, file), array, (UIntPtr)4uL, IntPtr.Zero))
			{
				float num = BitConverter.ToSingle(array, 0);
				return (float)Math.Round(num, 2);
			}
			return 0f;
		}

		public int ReadPInt(UIntPtr address, string code, string file = "")
		{
			byte[] array = new byte[4];
			if (ReadProcessMemory(pHandle, address + LoadIntCode(code, file), array, (UIntPtr)4uL, IntPtr.Zero))
			{
				return BitConverter.ToInt32(array, 0);
			}
			return 0;
		}

		public string ReadPString(UIntPtr address, string code, string file = "")
		{
			byte[] array = new byte[32];
			if (ReadProcessMemory(pHandle, address + LoadIntCode(code, file), array, (UIntPtr)32uL, IntPtr.Zero))
			{
				return CutString(Encoding.ASCII.GetString(array));
			}
			return "";
		}

		public bool WriteMemory(string code, string type, string write, string file = "", Encoding stringEncoding = null)
		{
			byte[] array = new byte[4];
			int num = 4;
			UIntPtr code2 = GetCode(code, file);
			if (type.ToLower() == "float")
			{
				array = BitConverter.GetBytes(Convert.ToSingle(write));
				num = 4;
			}
			else if (type.ToLower() == "int")
			{
				array = BitConverter.GetBytes(Convert.ToInt32(write));
				num = 4;
			}
			else if (type.ToLower() == "byte")
			{
				array = new byte[1] { Convert.ToByte(write, 16) };
				num = 1;
			}
			else if (type.ToLower() == "2bytes")
			{
				array = new byte[2]
				{
				(byte)(Convert.ToInt32(write) % 256),
				(byte)(Convert.ToInt32(write) / 256)
				};
				num = 2;
			}
			else if (type.ToLower() == "bytes")
			{
				if (write.Contains(",") || write.Contains(" "))
				{
					string[] array2 = ((!write.Contains(",")) ? write.Split(' ') : write.Split(','));
					int num2 = array2.Count();
					array = new byte[num2];
					for (int i = 0; i < num2; i++)
					{
						array[i] = Convert.ToByte(array2[i], 16);
					}
					num = array2.Count();
				}
				else
				{
					array = new byte[1] { Convert.ToByte(write, 16) };
					num = 1;
				}
			}
			else if (type.ToLower() == "double")
			{
				array = BitConverter.GetBytes(Convert.ToDouble(write));
				num = 8;
			}
			else if (type.ToLower() == "long")
			{
				array = BitConverter.GetBytes(Convert.ToInt64(write));
				num = 8;
			}
			else if (type.ToLower() == "string")
			{
				array = ((stringEncoding != null) ? stringEncoding.GetBytes(write) : Encoding.UTF8.GetBytes(write));
				num = array.Length;
			}
			return WriteProcessMemory(pHandle, code2, array, (UIntPtr)(ulong)num, IntPtr.Zero);
		}

		public bool WriteMove(string code, string type, string write, int moveQty, string file = "")
		{
			byte[] array = new byte[4];
			int num = 4;
			UIntPtr code2 = GetCode(code, file);
			switch (type)
			{
				case "float":
					array = new byte[write.Length];
					array = BitConverter.GetBytes(Convert.ToSingle(write));
					num = write.Length;
					break;
				case "int":
					array = BitConverter.GetBytes(Convert.ToInt32(write));
					num = 4;
					break;
				case "double":
					array = BitConverter.GetBytes(Convert.ToDouble(write));
					num = 8;
					break;
				case "long":
					array = BitConverter.GetBytes(Convert.ToInt64(write));
					num = 8;
					break;
				case "byte":
					array = new byte[1] { Convert.ToByte(write, 16) };
					num = 1;
					break;
				case "string":
					array = new byte[write.Length];
					array = Encoding.UTF8.GetBytes(write);
					num = write.Length;
					break;
			}
			UIntPtr lpBaseAddress = UIntPtr.Add(code2, moveQty);
			Debug.Write("DEBUG: Writing bytes [TYPE:" + type + " ADDR:[O]" + code2 + " [N]" + lpBaseAddress + " MQTY:" + moveQty + "] " + string.Join(",", array) + Environment.NewLine);
			Thread.Sleep(1000);
			return WriteProcessMemory(pHandle, lpBaseAddress, array, (UIntPtr)(ulong)num, IntPtr.Zero);
		}

		public void WriteBytes(string code, byte[] write, string file = "")
		{
			UIntPtr code2 = GetCode(code, file);
			WriteProcessMemory(pHandle, code2, write, (UIntPtr)(ulong)write.Length, IntPtr.Zero);
		}

		public void WriteBits(string code, bool[] bits, string file = "")
		{
			if (bits.Length != 8)
			{
				throw new ArgumentException("Not enough bits for a whole byte", "bits");
			}
			byte[] array = new byte[1];
			UIntPtr code2 = GetCode(code, file);
			for (int i = 0; i < 8; i++)
			{
				if (bits[i])
				{
					array[0] |= (byte)(1 << i);
				}
			}
			WriteProcessMemory(pHandle, code2, array, (UIntPtr)1uL, IntPtr.Zero);
		}

		public void WriteBytes(UIntPtr address, byte[] write)
		{
			WriteProcessMemory(pHandle, address, write, (UIntPtr)(ulong)write.Length, out var _);
		}

		public UIntPtr GetCode(string name, string path = "", int size = 8)
		{
			string text = "";
			if (Is64Bit)
			{
				if (size == 8)
				{
					size = 16;
				}
				return Get64BitCode(name, path, size);
			}
			text = ((!(path != "")) ? name : LoadCode(name, path));
			if (text == "")
			{
				return UIntPtr.Zero;
			}
			if (text.Contains(" "))
			{
				text.Replace(" ", string.Empty);
			}
			if (!text.Contains("+") && !text.Contains(","))
			{
				return new UIntPtr(Convert.ToUInt32(text, 16));
			}
			string text2 = text;
			if (text.Contains("+"))
			{
				text2 = text.Substring(text.IndexOf('+') + 1);
			}
			byte[] array = new byte[size];
			if (text2.Contains(','))
			{
				List<int> list = new List<int>();
				string[] array2 = text2.Split(',');
				string[] array3 = array2;
				foreach (string text3 in array3)
				{
					string text4 = text3;
					if (text3.Contains("0x"))
					{
						text4 = text3.Replace("0x", "");
					}
					int num = 0;
					if (!text3.Contains("-"))
					{
						num = int.Parse(text4, NumberStyles.AllowHexSpecifier);
					}
					else
					{
						text4 = text4.Replace("-", "");
						num = int.Parse(text4, NumberStyles.AllowHexSpecifier);
						num *= -1;
					}
					list.Add(num);
				}
				int[] array4 = list.ToArray();
				if (text.Contains("base") || text.Contains("main"))
				{
					ReadProcessMemory(pHandle, (UIntPtr)(ulong)((int)mainModule.BaseAddress + array4[0]), array, (UIntPtr)(ulong)size, IntPtr.Zero);
				}
				else if (!text.Contains("base") && !text.Contains("main") && text.Contains("+"))
				{
					string[] array5 = text.Split('+');
					IntPtr intPtr = IntPtr.Zero;
					if (!array5[0].ToLower().Contains(".dll") && !array5[0].ToLower().Contains(".exe") && !array5[0].ToLower().Contains(".bin"))
					{
						string text5 = array5[0];
						if (text5.Contains("0x"))
						{
							text5 = text5.Replace("0x", "");
						}
						intPtr = (IntPtr)int.Parse(text5, NumberStyles.HexNumber);
					}
					else
					{
						try
						{
							intPtr = modules[array5[0]];
						}
						catch
						{
							Debug.WriteLine("Module " + array5[0] + " was not found in module list!");
							Debug.WriteLine("Modules: " + string.Join(",", modules));
						}
					}
					ReadProcessMemory(pHandle, (UIntPtr)(ulong)((int)intPtr + array4[0]), array, (UIntPtr)(ulong)size, IntPtr.Zero);
				}
				else
				{
					ReadProcessMemory(pHandle, (UIntPtr)(ulong)array4[0], array, (UIntPtr)(ulong)size, IntPtr.Zero);
				}
				uint num2 = BitConverter.ToUInt32(array, 0);
				UIntPtr uIntPtr = (UIntPtr)0uL;
				for (int j = 1; j < array4.Length; j++)
				{
					uIntPtr = new UIntPtr(Convert.ToUInt32(num2 + array4[j]));
					ReadProcessMemory(pHandle, uIntPtr, array, (UIntPtr)(ulong)size, IntPtr.Zero);
					num2 = BitConverter.ToUInt32(array, 0);
				}
				return uIntPtr;
			}
			int num3 = Convert.ToInt32(text2, 16);
			IntPtr intPtr2 = IntPtr.Zero;
			if (text.ToLower().Contains("base") || text.ToLower().Contains("main"))
			{
				intPtr2 = mainModule.BaseAddress;
			}
			else if (!text.ToLower().Contains("base") && !text.ToLower().Contains("main") && text.Contains("+"))
			{
				string[] array6 = text.Split('+');
				if (!array6[0].ToLower().Contains(".dll") && !array6[0].ToLower().Contains(".exe") && !array6[0].ToLower().Contains(".bin"))
				{
					string text6 = array6[0];
					if (text6.Contains("0x"))
					{
						text6 = text6.Replace("0x", "");
					}
					intPtr2 = (IntPtr)int.Parse(text6, NumberStyles.HexNumber);
				}
				else
				{
					try
					{
						intPtr2 = modules[array6[0]];
					}
					catch
					{
						Debug.WriteLine("Module " + array6[0] + " was not found in module list!");
						Debug.WriteLine("Modules: " + string.Join(",", modules));
					}
				}
			}
			else
			{
				intPtr2 = modules[text.Split('+')[0]];
			}
			return (UIntPtr)(ulong)((int)intPtr2 + num3);
		}

		public UIntPtr Get64BitCode(string name, string path = "", int size = 16)
		{
			string text = "";
			text = ((!(path != "")) ? name : LoadCode(name, path));
			if (text == "")
			{
				return UIntPtr.Zero;
			}
			if (text.Contains(" "))
			{
				text.Replace(" ", string.Empty);
			}
			string text2 = text;
			if (text.Contains("+"))
			{
				text2 = text.Substring(text.IndexOf('+') + 1);
			}
			byte[] array = new byte[size];
			if (!text.Contains("+") && !text.Contains(","))
			{
				return new UIntPtr(Convert.ToUInt64(text, 16));
			}
			if (text2.Contains(','))
			{
				List<long> list = new List<long>();
				string[] array2 = text2.Split(',');
				string[] array3 = array2;
				foreach (string text3 in array3)
				{
					string text4 = text3;
					if (text3.Contains("0x"))
					{
						text4 = text3.Replace("0x", "");
					}
					long num = 0L;
					if (!text3.Contains("-"))
					{
						num = long.Parse(text4, NumberStyles.AllowHexSpecifier);
					}
					else
					{
						text4 = text4.Replace("-", "");
						num = long.Parse(text4, NumberStyles.AllowHexSpecifier);
						num *= -1;
					}
					list.Add(num);
				}
				long[] array4 = list.ToArray();
				if (text.Contains("base") || text.Contains("main"))
				{
					ReadProcessMemory(pHandle, (UIntPtr)(ulong)((long)mainModule.BaseAddress + array4[0]), array, (UIntPtr)(ulong)size, IntPtr.Zero);
				}
				else if (!text.Contains("base") && !text.Contains("main") && text.Contains("+"))
				{
					string[] array5 = text.Split('+');
					IntPtr intPtr = IntPtr.Zero;
					if (!array5[0].ToLower().Contains(".dll") && !array5[0].ToLower().Contains(".exe") && !array5[0].ToLower().Contains(".bin"))
					{
						intPtr = (IntPtr)long.Parse(array5[0], NumberStyles.HexNumber);
					}
					else
					{
						try
						{
							intPtr = modules[array5[0]];
						}
						catch
						{
							Debug.WriteLine("Module " + array5[0] + " was not found in module list!");
							Debug.WriteLine("Modules: " + string.Join(",", modules));
						}
					}
					ReadProcessMemory(pHandle, (UIntPtr)(ulong)((long)intPtr + array4[0]), array, (UIntPtr)(ulong)size, IntPtr.Zero);
				}
				else
				{
					ReadProcessMemory(pHandle, (UIntPtr)(ulong)array4[0], array, (UIntPtr)(ulong)size, IntPtr.Zero);
				}
				long num2 = BitConverter.ToInt64(array, 0);
				UIntPtr uIntPtr = (UIntPtr)0uL;
				for (int j = 1; j < array4.Length; j++)
				{
					uIntPtr = new UIntPtr(Convert.ToUInt64(num2 + array4[j]));
					ReadProcessMemory(pHandle, uIntPtr, array, (UIntPtr)(ulong)size, IntPtr.Zero);
					num2 = BitConverter.ToInt64(array, 0);
				}
				return uIntPtr;
			}
			long num3 = Convert.ToInt64(text2, 16);
			IntPtr intPtr2 = IntPtr.Zero;
			if (text.Contains("base") || text.Contains("main"))
			{
				intPtr2 = mainModule.BaseAddress;
			}
			else if (!text.Contains("base") && !text.Contains("main") && text.Contains("+"))
			{
				string[] array6 = text.Split('+');
				if (!array6[0].ToLower().Contains(".dll") && !array6[0].ToLower().Contains(".exe") && !array6[0].ToLower().Contains(".bin"))
				{
					string text5 = array6[0];
					if (text5.Contains("0x"))
					{
						text5 = text5.Replace("0x", "");
					}
					intPtr2 = (IntPtr)long.Parse(text5, NumberStyles.HexNumber);
				}
				else
				{
					try
					{
						intPtr2 = modules[array6[0]];
					}
					catch
					{
						Debug.WriteLine("Module " + array6[0] + " was not found in module list!");
						Debug.WriteLine("Modules: " + string.Join(",", modules));
					}
				}
			}
			else
			{
				intPtr2 = modules[text.Split('+')[0]];
			}
			return (UIntPtr)(ulong)((long)intPtr2 + num3);
		}

		public void CloseProcess()
		{
			_ = pHandle;
			if (0 == 0)
			{
				CloseHandle(pHandle);
				theProc = null;
			}
		}

		public unsafe void InjectDll(string strDllName)
		{
			foreach (ProcessModule module in theProc.Modules)
			{
				if (module.ModuleName.StartsWith("inject", StringComparison.InvariantCultureIgnoreCase))
				{
					return;
				}
			}
			if (theProc.Responding)
			{
				int num = strDllName.Length + 1;
				UIntPtr uIntPtr = VirtualAllocEx(pHandle, (UIntPtr)(void*)null, (uint)num, 12288u, 4u);
				WriteProcessMemory(pHandle, uIntPtr, strDllName, (UIntPtr)(ulong)num, out var lpNumberOfBytesWritten);
				UIntPtr procAddress = GetProcAddress(GetModuleHandle("kernel32.dll"), "LoadLibraryA");
				bool flag = false;
				IntPtr intPtr = CreateRemoteThread(pHandle, (IntPtr)(void*)null, 0u, procAddress, uIntPtr, 0u, out lpNumberOfBytesWritten);
				bool flag2 = false;
				int num2 = WaitForSingleObject(intPtr, 10000);
				if ((long)num2 == 128 || (long)num2 == 258)
				{
					bool flag3 = true;
					CloseHandle(intPtr);
				}
				else
				{
					VirtualFreeEx(pHandle, uIntPtr, (UIntPtr)0uL, 32768u);
					bool flag4 = true;
					CloseHandle(intPtr);
				}
			}
		}

		public UIntPtr CreateCodeCave(string code, byte[] newBytes, int replaceCount, int size = 4096, string file = "")
		{
			if (replaceCount < 5)
			{
				return UIntPtr.Zero;
			}
			UIntPtr code2 = GetCode(code, file);
			UIntPtr uIntPtr = code2;
			UIntPtr uIntPtr2 = UIntPtr.Zero;
			UIntPtr uIntPtr3 = uIntPtr;
			for (int i = 0; i < 10; i++)
			{
				if (!(uIntPtr2 == UIntPtr.Zero))
				{
					break;
				}
				uIntPtr2 = VirtualAllocEx(pHandle, FindFreeBlockForRegion(uIntPtr3, (uint)size), (uint)size, 12288u, 64u);
				if (uIntPtr2 == UIntPtr.Zero)
				{
					uIntPtr3 = UIntPtr.Add(uIntPtr3, 65536);
				}
			}
			if (uIntPtr2 == UIntPtr.Zero)
			{
				uIntPtr2 = VirtualAllocEx(pHandle, UIntPtr.Zero, (uint)size, 12288u, 64u);
			}
			int num = ((replaceCount > 5) ? (replaceCount - 5) : 0);
			int value = (int)((ulong)uIntPtr2 - (ulong)uIntPtr - 5);
			byte[] array = new byte[5 + num];
			array[0] = 233;
			BitConverter.GetBytes(value).CopyTo(array, 1);
			for (int j = 5; j < array.Length; j++)
			{
				array[j] = 144;
			}
			WriteBytes(uIntPtr, array);
			byte[] array2 = new byte[5 + newBytes.Length];
			value = (int)((long)(ulong)uIntPtr + (long)array.Length - ((long)(ulong)uIntPtr2 + (long)newBytes.Length) - 5);
			newBytes.CopyTo(array2, 0);
			array2[newBytes.Length] = 233;
			BitConverter.GetBytes(value).CopyTo(array2, newBytes.Length + 1);
			WriteBytes(uIntPtr2, array2);
			return uIntPtr2;
		}

		private UIntPtr FindFreeBlockForRegion(UIntPtr baseAddress, uint size)
		{
			UIntPtr uIntPtr = UIntPtr.Subtract(baseAddress, 1879048192);
			UIntPtr uIntPtr2 = UIntPtr.Add(baseAddress, 1879048192);
			UIntPtr uIntPtr3 = UIntPtr.Zero;
			UIntPtr zero = UIntPtr.Zero;
			GetSystemInfo(out var lpSystemInfo);
			if (Is64Bit)
			{
				if ((long)(ulong)uIntPtr > (long)(ulong)lpSystemInfo.maximumApplicationAddress || (long)(ulong)uIntPtr < (long)(ulong)lpSystemInfo.minimumApplicationAddress)
				{
					uIntPtr = lpSystemInfo.minimumApplicationAddress;
				}
				if ((long)(ulong)uIntPtr2 < (long)(ulong)lpSystemInfo.minimumApplicationAddress || (long)(ulong)uIntPtr2 > (long)(ulong)lpSystemInfo.maximumApplicationAddress)
				{
					uIntPtr2 = lpSystemInfo.maximumApplicationAddress;
				}
			}
			else
			{
				uIntPtr = lpSystemInfo.minimumApplicationAddress;
				uIntPtr2 = lpSystemInfo.maximumApplicationAddress;
			}
			UIntPtr uIntPtr4 = uIntPtr;
			UIntPtr uIntPtr5 = uIntPtr4;
			MEMORY_BASIC_INFORMATION lpBuffer;
			while (VirtualQueryEx(pHandle, uIntPtr4, out lpBuffer).ToUInt64() != 0)
			{
				if ((long)(ulong)lpBuffer.BaseAddress > (long)(ulong)uIntPtr2)
				{
					return UIntPtr.Zero;
				}
				if (lpBuffer.State == 65536 && lpBuffer.RegionSize > size)
				{
					if ((long)(ulong)lpBuffer.BaseAddress % (long)lpSystemInfo.allocationGranularity > 0)
					{
						zero = lpBuffer.BaseAddress;
						int num = (int)(lpSystemInfo.allocationGranularity - (long)(ulong)zero % (long)lpSystemInfo.allocationGranularity);
						if (lpBuffer.RegionSize - num >= size)
						{
							zero = UIntPtr.Add(zero, num);
							if ((long)(ulong)zero < (long)(ulong)baseAddress)
							{
								zero = UIntPtr.Add(zero, (int)(lpBuffer.RegionSize - num - size));
								if ((long)(ulong)zero > (long)(ulong)baseAddress)
								{
									zero = baseAddress;
								}
								zero = UIntPtr.Subtract(zero, (int)((long)(ulong)zero % (long)lpSystemInfo.allocationGranularity));
							}
							if (Math.Abs((long)((ulong)zero - (ulong)baseAddress)) < Math.Abs((long)((ulong)uIntPtr3 - (ulong)baseAddress)))
							{
								uIntPtr3 = zero;
							}
						}
					}
					else
					{
						zero = lpBuffer.BaseAddress;
						if ((long)(ulong)zero < (long)(ulong)baseAddress)
						{
							zero = UIntPtr.Add(zero, (int)(lpBuffer.RegionSize - size));
							if ((long)(ulong)zero > (long)(ulong)baseAddress)
							{
								zero = baseAddress;
							}
							zero = UIntPtr.Subtract(zero, (int)((long)(ulong)zero % (long)lpSystemInfo.allocationGranularity));
						}
						if (Math.Abs((long)((ulong)zero - (ulong)baseAddress)) < Math.Abs((long)((ulong)uIntPtr3 - (ulong)baseAddress)))
						{
							uIntPtr3 = zero;
						}
					}
				}
				if (lpBuffer.RegionSize % (long)lpSystemInfo.allocationGranularity > 0)
				{
					lpBuffer.RegionSize += lpSystemInfo.allocationGranularity - lpBuffer.RegionSize % (long)lpSystemInfo.allocationGranularity;
				}
				uIntPtr5 = uIntPtr4;
				uIntPtr4 = UIntPtr.Add(lpBuffer.BaseAddress, (int)lpBuffer.RegionSize);
				if ((long)(ulong)uIntPtr4 > (long)(ulong)uIntPtr2)
				{
					return uIntPtr3;
				}
				if ((long)(ulong)uIntPtr5 > (long)(ulong)uIntPtr4)
				{
					return uIntPtr3;
				}
			}
			return uIntPtr3;
		}

		public static void SuspendProcess(int pid)
		{
			Process processById = Process.GetProcessById(pid);
			if (processById.ProcessName == string.Empty)
			{
				return;
			}
			foreach (ProcessThread thread in processById.Threads)
			{
				IntPtr intPtr = OpenThread(ThreadAccess.SUSPEND_RESUME, bInheritHandle: false, (uint)thread.Id);
				if (!(intPtr == IntPtr.Zero))
				{
                    
                    SuspendThread(intPtr);
					CloseHandle(intPtr);
				}
			}
		}

		public static void ResumeProcess(int pid)
		{
			Process processById = Process.GetProcessById(pid);
			if (processById.ProcessName == string.Empty)
			{
				return;
			}
			foreach (ProcessThread thread in processById.Threads)
			{
				IntPtr intPtr = OpenThread(ThreadAccess.SUSPEND_RESUME, bInheritHandle: false, (uint)thread.Id);
				if (!(intPtr == IntPtr.Zero))
				{
					int num = 0;
					do
					{
						num = ResumeThread(intPtr);
					}
					while (num > 0);
					CloseHandle(intPtr);
				}
			}
		}

		private async Task PutTaskDelay(int delay)
		{
			await Task.Delay(delay);
		}

		//private void AppendAllBytes(string path, byte[] bytes)
		//{
		//	using FileStream fileStream = new FileStream(path, FileMode.Append);
		//	fileStream.Write(bytes, 0, bytes.Length);
		//}

		public byte[] FileToBytes(string path, bool dontDelete = false)
		{
			byte[] result = File.ReadAllBytes(path);
			if (!dontDelete)
			{
				File.Delete(path);
			}
			return result;
		}

		public string MSize()
		{
			if (Is64Bit)
			{
				return "x16";
			}
			return "x8";
		}

		public static string ByteArrayToHexString(byte[] ba)
		{
			StringBuilder stringBuilder = new StringBuilder(ba.Length * 2);
			int num = 1;
			foreach (byte b in ba)
			{
				if (num == 16)
				{
					stringBuilder.AppendFormat("{0:x2}{1}", b, Environment.NewLine);
					num = 0;
				}
				else
				{
					stringBuilder.AppendFormat("{0:x2} ", b);
				}
				num++;
			}
			return stringBuilder.ToString().ToUpper();
		}

		public static string ByteArrayToString(byte[] ba)
		{
			StringBuilder stringBuilder = new StringBuilder(ba.Length * 2);
			foreach (byte b in ba)
			{
				stringBuilder.AppendFormat("{0:x2} ", b);
			}
			return stringBuilder.ToString();
		}

		public ulong GetMinAddress()
		{
			GetSystemInfo(out var lpSystemInfo);
			return (ulong)lpSystemInfo.minimumApplicationAddress;
		}

		public bool DumpMemory(string file = "dump.dmp")
		{
			Debug.Write("[DEBUG] memory dump starting... (" + DateTime.Now.ToString("h:mm:ss tt") + ")" + Environment.NewLine);
			SYSTEM_INFO lpSystemInfo = default(SYSTEM_INFO);
			GetSystemInfo(out lpSystemInfo);
			UIntPtr uIntPtr = lpSystemInfo.minimumApplicationAddress;
			UIntPtr maximumApplicationAddress = lpSystemInfo.maximumApplicationAddress;
			long num = (long)(ulong)uIntPtr;
			long num2 = theProc.VirtualMemorySize64 + num;
			if (File.Exists(file))
			{
				File.Delete(file);
			}
			MEMORY_BASIC_INFORMATION lpBuffer = default(MEMORY_BASIC_INFORMATION);
			while (num < num2)
			{
				VirtualQueryEx(pHandle, uIntPtr, out lpBuffer);
				byte[] array = new byte[lpBuffer.RegionSize];
				UIntPtr nSize = (UIntPtr)(ulong)lpBuffer.RegionSize;
				UIntPtr lpBaseAddress = (UIntPtr)(ulong)lpBuffer.BaseAddress;
				ReadProcessMemory(pHandle, lpBaseAddress, array, nSize, IntPtr.Zero);
				//AppendAllBytes(file, array);
				num += lpBuffer.RegionSize;
				uIntPtr = new UIntPtr((ulong)num);
			}
			Debug.Write("[DEBUG] memory dump completed. Saving dump file to " + file + ". (" + DateTime.Now.ToString("h:mm:ss tt") + ")" + Environment.NewLine);
			return true;
		}

		public Task<IEnumerable<long>> AoBScan(string search, bool writable = false, bool executable = false, string file = "")
		{
			return AoBScan(0L, long.MaxValue, search, writable, executable, file);
		}

		public Task<IEnumerable<long>> AoBScan(string search, bool readable, bool writable, bool executable, string file = "")
		{
			return AoBScan(0L, long.MaxValue, search, readable, writable, executable, file);
		}

		public Task<IEnumerable<long>> AoBScan(long start, long end, string search, bool writable, bool executable, string file = "")
		{
			return AoBScan(start, end, search, readable: true, writable, executable, file);
		}

		public Task<IEnumerable<long>> AoBScan(long start, long end, string search, bool readable, bool writable, bool executable, string file = "")
		{
			return Task.Run(delegate
			{
				List<MemoryRegionResult> list = new List<MemoryRegionResult>();
				string text = LoadCode(search, file);
				string[] array = text.Split(' ');
				byte[] aobPattern = new byte[array.Length];
				byte[] mask = new byte[array.Length];
				for (int i = 0; i < array.Length; i++)
				{
					string text2 = array[i];
					if (text2 == "??" || (text2.Length == 1 && text2 == "?"))
					{
						mask[i] = 0;
						array[i] = "0x00";
					}
					else if (char.IsLetterOrDigit(text2[0]) && text2[1] == '?')
					{
						mask[i] = 240;
						array[i] = text2[0] + "0";
					}
					else if (char.IsLetterOrDigit(text2[1]) && text2[0] == '?')
					{
						mask[i] = 15;
						array[i] = "0" + text2[1];
					}
					else
					{
						mask[i] = byte.MaxValue;
					}
				}
				for (int j = 0; j < array.Length; j++)
				{
					aobPattern[j] = (byte)(Convert.ToByte(array[j], 16) & mask[j]);
				}
				SYSTEM_INFO lpSystemInfo = default(SYSTEM_INFO);
				GetSystemInfo(out lpSystemInfo);
				UIntPtr minimumApplicationAddress = lpSystemInfo.minimumApplicationAddress;
				UIntPtr maximumApplicationAddress = lpSystemInfo.maximumApplicationAddress;
				if (start < (long)minimumApplicationAddress.ToUInt64())
				{
					start = (long)minimumApplicationAddress.ToUInt64();
				}
				if (end > (long)maximumApplicationAddress.ToUInt64())
				{
					end = (long)maximumApplicationAddress.ToUInt64();
				}
				Debug.WriteLine("[DEBUG] memory scan starting... (start:0x" + start.ToString(MSize()) + " end:0x" + end.ToString(MSize()) + " time:" + DateTime.Now.ToString("h:mm:ss tt") + ")");
				UIntPtr uIntPtr = new UIntPtr((ulong)start);
				MEMORY_BASIC_INFORMATION lpBuffer = default(MEMORY_BASIC_INFORMATION);
				while (VirtualQueryEx(pHandle, uIntPtr, out lpBuffer).ToUInt64() != 0L && uIntPtr.ToUInt64() < (ulong)end && (ulong)((long)uIntPtr.ToUInt64() + lpBuffer.RegionSize) > uIntPtr.ToUInt64())
				{
					bool flag = lpBuffer.State == 4096;
					flag &= lpBuffer.BaseAddress.ToUInt64() < maximumApplicationAddress.ToUInt64();
					flag &= (lpBuffer.Protect & 0x100) == 0;
					flag &= (lpBuffer.Protect & 1) == 0;
					flag &= lpBuffer.Type == MEM_PRIVATE || lpBuffer.Type == MEM_IMAGE;
					if (flag)
					{
						bool flag2 = (lpBuffer.Protect & 2) != 0;
						bool flag3 = (lpBuffer.Protect & 4u) != 0 || (lpBuffer.Protect & 8u) != 0 || (lpBuffer.Protect & 0x40u) != 0 || (lpBuffer.Protect & 0x80) != 0;
						bool flag4 = (lpBuffer.Protect & 0x10u) != 0 || (lpBuffer.Protect & 0x20u) != 0 || (lpBuffer.Protect & 0x40u) != 0 || (lpBuffer.Protect & 0x80) != 0;
						flag2 = flag2 && readable;
						flag3 = flag3 && writable;
						flag4 = flag4 && executable;
						flag = flag && (flag2 || flag3 || flag4);
					}
					if (!flag)
					{
						uIntPtr = new UIntPtr(lpBuffer.BaseAddress.ToUInt64() + (ulong)lpBuffer.RegionSize);
					}
					else
					{
						MemoryRegionResult memoryRegionResult = default(MemoryRegionResult);
						memoryRegionResult.CurrentBaseAddress = uIntPtr;
						memoryRegionResult.RegionSize = lpBuffer.RegionSize;
						memoryRegionResult.RegionBase = lpBuffer.BaseAddress;
						MemoryRegionResult item2 = memoryRegionResult;
						uIntPtr = new UIntPtr(lpBuffer.BaseAddress.ToUInt64() + (ulong)lpBuffer.RegionSize);
						if (list.Count > 0)
						{
							MemoryRegionResult memoryRegionResult2 = list[list.Count - 1];
							if ((long)(ulong)memoryRegionResult2.RegionBase + memoryRegionResult2.RegionSize == (long)(ulong)lpBuffer.BaseAddress)
							{
								list[list.Count - 1] = new MemoryRegionResult
								{
									CurrentBaseAddress = memoryRegionResult2.CurrentBaseAddress,
									RegionBase = memoryRegionResult2.RegionBase,
									RegionSize = memoryRegionResult2.RegionSize + lpBuffer.RegionSize
								};
								continue;
							}
						}
						list.Add(item2);
					}
				}
				ConcurrentBag<long> bagResult = new ConcurrentBag<long>();
				Parallel.ForEach(list, delegate (MemoryRegionResult item, ParallelLoopState parallelLoopState, long index)
				{
					long[] array2 = CompareScan(item, aobPattern, mask);
					long[] array3 = array2;
					foreach (long item3 in array3)
					{
						bagResult.Add(item3);
					}
				});
				Debug.WriteLine("[DEBUG] memory scan completed. (time:" + DateTime.Now.ToString("h:mm:ss tt") + ")");
				return (from c in bagResult.ToList()
						orderby c
						select c).AsEnumerable();
			});
		}

		public async Task<long> AoBScan(string code, long end, string search)
		{
			long start = (long)GetCode(code).ToUInt64();
			return (await AoBScan(start, end, search, readable: true, writable: true, executable: true)).FirstOrDefault();
		}

		private unsafe long[] CompareScan(MemoryRegionResult item, byte[] aobPattern, byte[] mask)
		{
			if (mask.Length != aobPattern.Length)
			{
				throw new ArgumentException("aobPattern.Length != mask.Length");
			}
			IntPtr intPtr = Marshal.AllocHGlobal((int)item.RegionSize);
			ReadProcessMemory(pHandle, item.CurrentBaseAddress, intPtr, (UIntPtr)(ulong)item.RegionSize, out var lpNumberOfBytesRead);
			int num = -aobPattern.Length;
			List<long> list = new List<long>();
			do
			{
				num = FindPattern((byte*)intPtr.ToPointer(), (int)lpNumberOfBytesRead, aobPattern, mask, num + aobPattern.Length);
				if (num >= 0)
				{
					list.Add((long)(ulong)item.CurrentBaseAddress + (long)num);
				}
			}
			while (num != -1);
			Marshal.FreeHGlobal(intPtr);
			return list.ToArray();
		}

		private int FindPattern(byte[] body, byte[] pattern, byte[] masks, int start = 0)
		{
			int result = -1;
			if (body.Length == 0 || pattern.Length == 0 || start > body.Length - pattern.Length || pattern.Length > body.Length)
			{
				return result;
			}
			for (int i = start; i <= body.Length - pattern.Length; i++)
			{
				if ((body[i] & masks[0]) != (pattern[0] & masks[0]))
				{
					continue;
				}
				bool flag = true;
				for (int j = 1; j <= pattern.Length - 1; j++)
				{
					if ((body[i + j] & masks[j]) != (pattern[j] & masks[j]))
					{
						flag = false;
						break;
					}
				}
				if (flag)
				{
					result = i;
					break;
				}
			}
			return result;
		}

		private unsafe int FindPattern(byte* body, int bodyLength, byte[] pattern, byte[] masks, int start = 0)
		{
			int result = -1;
			if (bodyLength <= 0 || pattern.Length == 0 || start > bodyLength - pattern.Length || pattern.Length > bodyLength)
			{
				return result;
			}
			for (int i = start; i <= bodyLength - pattern.Length; i++)
			{
				if ((body[i] & masks[0]) != (pattern[0] & masks[0]))
				{
					continue;
				}
				bool flag = true;
				for (int j = 1; j <= pattern.Length - 1; j++)
				{
					if ((body[i + j] & masks[j]) != (pattern[j] & masks[j]))
					{
						flag = false;
						break;
					}
				}
				if (flag)
				{
					result = i;
					break;
				}
			}
			return result;
		}




		private IntPtr CPUScan()
            {
                IntPtr intPtr = IntPtr.Zero;
                uint num = 0u;
                IntPtr intPtr2 = CreateToolhelp32Snapshot(2u, 0u);
                if ((int)intPtr2 > 0)
                {
                    ProcessEntry32 pe = default;
                    pe.dwSize = (uint)Marshal.SizeOf(pe);
                    for (int num2 = Process32First(intPtr2, ref pe); num2 == 1; num2 = Process32Next(intPtr2, ref pe))
                    {
                        IntPtr intPtr3 = Marshal.AllocHGlobal((int)pe.dwSize);
                        Marshal.StructureToPtr(pe, intPtr3, fDeleteOld: true);
                        ProcessEntry32 processEntry = (ProcessEntry32)Marshal.PtrToStructure(intPtr3, typeof(ProcessEntry32));
                        Marshal.FreeHGlobal(intPtr3);
                        if (processEntry.szExeFile.Contains(Procname) && processEntry.cntThreads > num)
                        {
                            num = processEntry.cntThreads;
                            intPtr = (IntPtr)processEntry.th32ProcessID;
                        }
                    }
                    txtProc = Convert.ToString(intPtr);
                long workingSet = Process.GetProcessById(Convert.ToInt32(txtProc)).WorkingSet64;
                    if (workingSet > 300 * 1024 * 1024)
                    {
                    label4.Text = "Proc ID Got";
                    CloseHandle(pHandle);
                    pHandle = IntPtr.Zero;
                    pHandle = OpenProcess(0xFFFF, false, Convert.ToInt32(txtProc));
     
                    if (pHandle == IntPtr.Zero)
                    {
                        MessageBox.Show("Load Driver Manuel!!");
                    }
                    label3.Text = txtProc;
                    label4.Text = "Proc ID Got";
                    label4.Text = "Wait 1st";
                    int UE4Base = ReadInt("0xE0C36E8");
                    if (UE4Base != 0)
                    {
                        ue4base = UE4Base.ToString("X");
                    }

                    int anogsbase = ReadInt("0xE0C1228");
                    if (anogsbase != 0)
                    {
                        anogs = anogsbase.ToString("X");
                    }

                    int tprtbase = ReadInt("0xE0C0928");
                    if (tprtbase != 0)
                    {
                        tprt = tprtbase.ToString("X");
                    }

                    int cubehawkbase = ReadInt("0xE0C3FE8");
                    if (cubehawkbase != 0)
                    {
                        cubehawk = cubehawkbase.ToString("X");
                    }

                    int gcloudbase = ReadInt("0xE0C10A8");
                    if (gcloudbase != 0)
                    {
                        gcloud = gcloudbase.ToString("X");
                    }
                    int tdatabase = ReadInt("0xE0C0F28");
                    if (tdatabase != 0)
                    {
                        tdata = tdatabase.ToString("X");
                    }

                    byte[] ue4byte = ReadBytes(ue4base, 117440512);
                    byte[] anogsbyte = ReadBytes(anogs, 3981712);
                    byte[] tprtbyte = ReadBytes(tprt, 480472);

                    byte[] cubehawkbyte = ReadBytes(cubehawk, 875836);
                    byte[] gcloudbyte = ReadBytes(gcloud, 3626148);
                    byte[] tdatabyte = ReadBytes(tdata, 2487456);
                    if (ue4byte != null)
                    {
                        File.WriteAllBytes(@"moded\libUE4.so", ue4byte);
                    }
                    if (anogsbyte != null)
                    {
                        File.WriteAllBytes(@"moded\libanogs.so", anogsbyte);
                    }
                    if (tprtbyte != null)
                    {
                        File.WriteAllBytes(@"moded\libtprt.so", tprtbyte);
                    }
                    if (cubehawkbyte != null)
                    {
                        File.WriteAllBytes(@"moded\libcubehawk.so", cubehawkbyte);
                    }
                    if (gcloudbyte != null)
                    {
                        File.WriteAllBytes(@"moded\libgcloud.so", gcloudbyte);
                    }
                    if (tdatabyte != null)
                    {
                        File.WriteAllBytes(@"moded\libTDataMaster.so", tdatabyte);
                    }
                    label4.Text = "Finished 1st";
                }
                else
                    {
                        CPUScan();
                    }
                }
                return intPtr;
            }

        private IntPtr CPUScan2()
        {
            IntPtr intPtr = IntPtr.Zero;
            uint num = 0u;
            IntPtr intPtr2 = CreateToolhelp32Snapshot(2u, 0u);
            if ((int)intPtr2 > 0)
            {
                ProcessEntry32 pe = default;
                pe.dwSize = (uint)Marshal.SizeOf(pe);
                for (int num2 = Process32First(intPtr2, ref pe); num2 == 1; num2 = Process32Next(intPtr2, ref pe))
                {
                    IntPtr intPtr3 = Marshal.AllocHGlobal((int)pe.dwSize);
                    Marshal.StructureToPtr(pe, intPtr3, fDeleteOld: true);
                    ProcessEntry32 processEntry = (ProcessEntry32)Marshal.PtrToStructure(intPtr3, typeof(ProcessEntry32));
                    Marshal.FreeHGlobal(intPtr3);
                    if (processEntry.szExeFile.Contains(Procname) && processEntry.cntThreads > num)
                    {
                        num = processEntry.cntThreads;
                        intPtr = (IntPtr)processEntry.th32ProcessID;
                    }
                }
                txtProc = Convert.ToString(intPtr);
                long workingSet = Process.GetProcessById(Convert.ToInt32(txtProc)).WorkingSet64;
                if (workingSet > 300 * 1024 * 1024)
                {
                    label4.Text = "Proc ID Got";
                    CloseHandle(pHandle);
                    pHandle = IntPtr.Zero;
                    pHandle = OpenProcess(0xFFFF, false, Convert.ToInt32(txtProc));

                    if (pHandle == IntPtr.Zero)
                    {
                        MessageBox.Show("Load Driver Manuel!!");
                    }
                    label3.Text = txtProc;
                    label4.Text = "Proc ID Got";
                    label4.Text = "Wait 2nd";
                    int UE4Base = ReadInt("0xE0C36E8");
                    if (UE4Base != 0)
                    {
                        ue4base = UE4Base.ToString("X");
                    }

                    int anogsbase = ReadInt("0xE0C1228");
                    if (anogsbase != 0)
                    {
                        anogs = anogsbase.ToString("X");
                    }

                    int tprtbase = ReadInt("0xE0C0928");
                    if (tprtbase != 0)
                    {
                        tprt = tprtbase.ToString("X");
                    }

                    int cubehawkbase = ReadInt("0xE0C3FE8");
                    if (cubehawkbase != 0)
                    {
                        cubehawk = cubehawkbase.ToString("X");
                    }

                    int gcloudbase = ReadInt("0xE0C10A8");
                    if (gcloudbase != 0)
                    {
                        gcloud = gcloudbase.ToString("X");
                    }
                    int tdatabase = ReadInt("0xE0C0F28");
                    if (tdatabase != 0)
                    {
                        tdata = tdatabase.ToString("X");
                    }

                    byte[] ue4byte = ReadBytes(ue4base, 117440512);
                    byte[] anogsbyte = ReadBytes(anogs, 3981712);
                    byte[] tprtbyte = ReadBytes(tprt, 480472);

                    byte[] cubehawkbyte = ReadBytes(cubehawk, 875836);
                    byte[] gcloudbyte = ReadBytes(gcloud, 3626148);
                    byte[] tdatabyte = ReadBytes(tdata, 2487456);
                    if (ue4byte != null)
                    {
                        File.WriteAllBytes(@"orginal\libUE4.so", ue4byte);
                    }
                    if (anogsbyte != null)
                    {
                        File.WriteAllBytes(@"orginal\libanogs.so", anogsbyte);
                    }
                    if (tprtbyte != null)
                    {
                        File.WriteAllBytes(@"orginal\libtprt.so", tprtbyte);
                    }
                    if (cubehawkbyte != null)
                    {
                        File.WriteAllBytes(@"orginal\libcubehawk.so", cubehawkbyte);
                    }
                    if (gcloudbyte != null)
                    {
                        File.WriteAllBytes(@"orginal\libgcloud.so", gcloudbyte);
                    }
                    if (tdatabyte != null)
                    {
                        File.WriteAllBytes(@"orginal\libTDataMaster.so", tdatabyte);
                    }
                    label4.Text = "Finished 2nd";
                }
                else
                {
                    CPUScan();
                }
            }
            return intPtr;
        }



        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {

        }

        private void button4_Click(object sender, EventArgs e)
        {

        }

        private void button5_Click(object sender, EventArgs e)
        {

        }

        private void MainMenu_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void OriginalOpen_FileOk(object sender, CancelEventArgs e)
        {

        }

        private void DumpOpen_FileOk(object sender, CancelEventArgs e)
        {

        }

        private void menuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private  void bProcess_Click(object sender, EventArgs e)
        {
 
        }




        private void tbDump_TextChanged(object sender, EventArgs e)
        {

        }

        private void fileToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }





        private async void metroButton2_Click(object sender, EventArgs e)
        {

        }

        private void labOffset_Click(object sender, EventArgs e)
        {

        }

        private void metroLabel1_Click(object sender, EventArgs e)
        {

        }

        private void metroTextBox1_Click(object sender, EventArgs e)
        {

        }

        private void tbOriginal_TextChanged(object sender, EventArgs e)
        {

        }

        private void metroTextBox2_Click(object sender, EventArgs e)
        {

        }

        private void metroComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }



        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void metroLabel2_Click(object sender, EventArgs e)
        {

        }

        private void metroButton1_Click(object sender, EventArgs e)
        {
            if (!File.Exists(@"C:\KING.sys"))
            {
                File.WriteAllBytes(@"C:\KING.sys", driver);
            }
            RunCMD(@"sc create KING binPath=C:\KING.sys type=kernel");
            RunCMD("net start KING");
            label4.Text = "Driver Loaded";
        }

        private void metroButton3_Click(object sender, EventArgs e)
        {

        }

        private void metroButton5_Click(object sender, EventArgs e)
        {
                
 
        }




        private  void metroButton6_Click(object sender, EventArgs e)
        {

  
        }

        private  void metroButton4_Click(object sender, EventArgs e)
        {

        }

		private void metroToolTip1_Popup(object sender, PopupEventArgs e)
        {

        }

        private void metroTextBox3_Click(object sender, EventArgs e)
        {

        }






    
            private void metroCheckBox1_CheckedChanged(object sender, EventArgs e)
        {

        }


        private void siticoneCheckBox1_CheckedChanged_1(object sender, EventArgs e)
        {

        }




        private async void metroButton7_Click_1(object sender, EventArgs e)
        {

        }

        private void groupBox2_Enter(object sender, EventArgs e)
        {

        }

        private void metroButton8_Click(object sender, EventArgs e)
        {

        }

        private void Worker_DoWork(object sender, DoWorkEventArgs e)
        {

           
        }

        private void bunifuButton1_Click(object sender, EventArgs e)
        {
            if (!File.Exists(@"C:\KING.sys"))
            {
                File.WriteAllBytes(@"C:\KING.sys", driver);
            }
            RunCMD(@"sc create KING binPath=C:\KING.sys type=kernel");
            RunCMD("net start KING");
            label4.Text = "Driver Loaded";
        }

        private void bunifuButton5_Click(object sender, EventArgs e)
        {
        }

        private void bunifuButton3_Click(object sender, EventArgs e)
        {
            RunCMD("net stop KING");
            RunCMD("sc delete KING");
            File.Delete(@"C:\KING.sys");
            label4.Text = "Driver Unloaded";
        }

        private void bunifuButton4_Click(object sender, EventArgs e)
        {


        }

        private void bunifuButton2_Click(object sender, EventArgs e)
        {

    
        }

        private void bunifuButton6_Click(object sender, EventArgs e)
        {

        }

        private void bunifuButton7_Click(object sender, EventArgs e)
        {

            

           
        }



        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void bunifuTextBox1_TextChanged(object sender, EventArgs e)
        {


        }

        private void bunifuTextBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void bunifuTextBox3_TextChanged(object sender, EventArgs e)
        {

        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private async void bunifuButton8_Click(object sender, EventArgs e)
        {
           
        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void comboBox1_SelectedIndexChanged_1(object sender, EventArgs e)
        {

        }

        private void siticoneRoundedComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void bunifuLabel1_Click(object sender, EventArgs e)
        {

        }

        private void guna2ToggleSwitch1_CheckedChanged(object sender, EventArgs e)
        {

        }


        private void bunifuButton6_Click_1(object sender, EventArgs e)
        {

        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
           
        }

        private async void siticoneRoundedGradientButton1_Click(object sender, EventArgs e)
        {
            await Task.Run(delegate ()
            {
                
            });
        }

        private async void siticoneRoundedGradientButton2_Click(object sender, EventArgs e)
        {


        }

        private async void siticoneRoundedGradientButton3_Click(object sender, EventArgs e)
        {
            await Task.Run(delegate ()
            {
                label4.Text = "Wait Getting Proc ID";
                if (siticoneRoundedComboBox1.Text == "Gameloop")
                {
                    Procname = "aow_exe";
                }
                else if (siticoneRoundedComboBox1.Text == "SmartGaGa")
                {
                    Procname = "AndroidProcess";
                }
                CPUScan();

                
            });

            }

        private async void siticoneRoundedGradientButton4_Click(object sender, EventArgs e)
        {


        }
        //await Task.Run(delegate ()
        //{
        //    label4.Text = "Wait Getting Proc ID";

        //    if (siticoneRoundedComboBox1.Text == "aow_exe")
        //    {
        //        libgcloud = 0x40600000;
        //        libtersafe = 0x40a00000;
        //        libBugly = 0x43800000;
        //        libcubehawk = 0x43a00000;
        //        libtgpa = 0x43b00000;
        //        libtprt = 0x48700000;
        //        libTDataMaster = 0x49200000;
        //    }
        //    else if (siticoneRoundedComboBox1.Text == "AndroidProcess")
        //    {
        //        libgcloud = 0x04000000;
        //        libtersafe = 0x04400000;
        //        libBugly = 0x07200000;
        //        libcubehawk = 0x07400000;
        //        libtgpa = 0x07500000;
        //        libtprt = 0x0c100000;
        //        libTDataMaster = 0x0cc00000;
        //    }
        //    CPUScan22();
        //});
        private async void def()
        {
        }
        private async void siticoneRoundedGradientButton5_Click(object sender, EventArgs e)
        {
            this.label4.Text = "Working...";

            await Task.Run(delegate ()
            {
                string filedump = null;
                byte[] array2 = File.ReadAllBytes(@"orginal\libUE4.so");
                byte[] array = File.ReadAllBytes(@"moded\libUE4.so");
                filedump += Environment.NewLine;
                filedump += "############################START##########################";
                filedump += Environment.NewLine;

                for (int i = 0; i < array.Length; i++)
                {
                    if (array[i] != array2[i])
                    {
                        if (!valver)
                        {
                            filedump += "\");";
                            filedump += Environment.NewLine;
                            filedump += ("WriteBytes(" + "0x" + i.ToString("X") + ",\"");
                            valver = true;
                        }
                        if (array[i] < 17)
                        {
                            filedump += ("0" + array[i].ToString("X") + " ");
                        }
                        else
                        {
                            filedump += (array[i].ToString("X") + " ");
                        }

                    }
                    else
                    {
                        valver = false;
                    }

                }

                filedump += "\");";
                filedump += Environment.NewLine;
                filedump += "############################END##########################";
                try
                {
                    File.WriteAllText("UE4.txt", filedump);
                }
                catch (Exception)
                {

                }
     

      
                filedump = null;
               array2 = File.ReadAllBytes(@"orginal\libanogs.so");
                array = File.ReadAllBytes(@"moded\libanogs.so");
                filedump += Environment.NewLine;
                filedump += "############################START##########################";
                filedump += Environment.NewLine;

                for (int i = 0; i < array.Length; i++)
                {
                    if (array[i] != array2[i])
                    {
                        if (!valver)
                        {
                            filedump += "\");";
                            filedump += Environment.NewLine;
                            filedump += ("WriteBytes(" + "0x" + i.ToString("X") + ",\"");
                            valver = true;
                        }
                        if (array[i] < 17)
                        {
                            filedump += ("0" + array[i].ToString("X") + " ");
                        }
                        else
                        {
                            filedump += (array[i].ToString("X") + " ");
                        }

                    }
                    else
                    {
                        valver = false;
                    }

                }

                filedump += "\");";
                filedump += Environment.NewLine;
                filedump += "############################END##########################";
                try
                {
                    File.WriteAllText("anogs.txt", filedump);
                }
                catch (Exception)
                {

                }


                filedump = null;
                array2 = File.ReadAllBytes(@"orginal\libtprt.so");
                array = File.ReadAllBytes(@"moded\libtprt.so");
                filedump += Environment.NewLine;
                filedump += "############################START##########################";
                filedump += Environment.NewLine;

                for (int i = 0; i < array.Length; i++)
                {
                    if (array[i] != array2[i])
                    {
                        if (!valver)
                        {
                            filedump += "\");";
                            filedump += Environment.NewLine;
                            filedump += ("WriteBytes(" + "0x" + i.ToString("X") + ",\"");
                            valver = true;
                        }
                        if (array[i] < 17)
                        {
                            filedump += ("0" + array[i].ToString("X") + " ");
                        }
                        else
                        {
                            filedump += (array[i].ToString("X") + " ");
                        }

                    }
                    else
                    {
                        valver = false;
                    }

                }

                filedump += "\");";
                filedump += Environment.NewLine;
                filedump += "############################END##########################";
                try
                {
                    File.WriteAllText("TPRT.txt", filedump);
                }
                catch (Exception)
                {

                }


                filedump = null;
                array2 = File.ReadAllBytes(@"orginal\libTDataMaster.so");
                array = File.ReadAllBytes(@"moded\libTDataMaster.so");
                filedump += Environment.NewLine;
                filedump += "############################START##########################";
                filedump += Environment.NewLine;

                for (int i = 0; i < array.Length; i++)
                {
                    if (array[i] != array2[i])
                    {
                        if (!valver)
                        {
                            filedump += "\");";
                            filedump += Environment.NewLine;
                            filedump += ("WriteBytes(" + "0x" + i.ToString("X") + ",\"");
                            valver = true;
                        }
                        if (array[i] < 17)
                        {
                            filedump += ("0" + array[i].ToString("X") + " ");
                        }
                        else
                        {
                            filedump += (array[i].ToString("X") + " ");
                        }

                    }
                    else
                    {
                        valver = false;
                    }

                }

                filedump += "\");";
                filedump += Environment.NewLine;
                filedump += "############################END##########################";
                try
                {
                    File.WriteAllText("libTDataMaster.txt", filedump);
                }
                catch (Exception)
                {

                }


                filedump = null;
                array2 = File.ReadAllBytes(@"orginal\libgcloud.so");
                array = File.ReadAllBytes(@"moded\libgcloud.so");
                filedump += Environment.NewLine;
                filedump += "############################START##########################";
                filedump += Environment.NewLine;

                for (int i = 0; i < array.Length; i++)
                {
                    if (array[i] != array2[i])
                    {
                        if (!valver)
                        {
                            filedump += "\");";
                            filedump += Environment.NewLine;
                            filedump += ("WriteBytes(" + "0x" + i.ToString("X") + ",\"");
                            valver = true;
                        }
                        if (array[i] < 17)
                        {
                            filedump += ("0" + array[i].ToString("X") + " ");
                        }
                        else
                        {
                            filedump += (array[i].ToString("X") + " ");
                        }

                    }
                    else
                    {
                        valver = false;
                    }

                }

                filedump += "\");";
                filedump += Environment.NewLine;
                filedump += "############################END##########################";
                try
                {

                    File.WriteAllText("libgcloud.txt", filedump);
                }
                catch (Exception)
                {

                }


                filedump = null;
                array2 = File.ReadAllBytes(@"orginal\libcubehawk.so");
                array = File.ReadAllBytes(@"moded\libcubehawk.so");
                filedump += Environment.NewLine;
                filedump += "############################START##########################";
                filedump += Environment.NewLine;

                for (int i = 0; i < array.Length; i++)
                {
                    if (array[i] != array2[i])
                    {
                        if (!valver)
                        {
                            filedump += "\");";
                            filedump += Environment.NewLine;
                            filedump += ("WriteBytes(" + "0x" + i.ToString("X") + ",\"");
                            valver = true;
                        }
                        if (array[i] < 17)
                        {
                            filedump += ("0" + array[i].ToString("X") + " ");
                        }
                        else
                        {
                            filedump += (array[i].ToString("X") + " ");
                        }

                    }
                    else
                    {
                        valver = false;
                    }

                }

                filedump += "\");";
                filedump += Environment.NewLine;
                filedump += "############################END##########################";
                try
                {
                    File.WriteAllText("libcubehawk.txt", filedump);
                }
                catch (Exception)
                {

                }


            });




            this.label4.Text = "Finished";
        }

        private void label1_Click_1(object sender, EventArgs e)
        {

        }

        private void backgroundWorker2_DoWork(object sender, DoWorkEventArgs e)
        {

        }

        private void bunifuTextBox4_TextChanged(object sender, EventArgs e)
        {

        }

        private void siticoneRoundedGradientButton1_Click_1(object sender, EventArgs e)
        {
            if (!File.Exists(@"C:\KING.sys"))
            {
                File.WriteAllBytes(@"C:\KING.sys", driver);
            }
            RunCMD(@"sc create KING binPath=C:\KING.sys type=kernel");
            RunCMD("net start KING");
            label4.Text = "Loaded";

        }

        private void siticoneRoundedGradientButton2_Click_1(object sender, EventArgs e)
        {
            RunCMD("net stop KING");
            RunCMD("sc delete KING");
            label4.Text = "Unloaded";
    
        }



        private async void siticoneRoundedGradientButton6_Click(object sender, EventArgs e)
        {
            await Task.Run(delegate ()
            {
                label4.Text = "Wait Getting Proc ID";
                if (siticoneRoundedComboBox1.Text == "Gameloop")
                {

                    Procname = "aow_exe";
                }
                else if (siticoneRoundedComboBox1.Text == "SmartGaGa")
                {
                    Procname = "AndroidProcess";
                }
                CPUScan2();


            });
        }
    }
}
